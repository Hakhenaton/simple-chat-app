<!DOCTYPE html>
<html>
    <head>
        <title>Dead simple app</title>
        <meta name="description" content="Une application moderne avec HTMX">
        <meta charset="utf-8">
        <link rel="stylesheet" href="/style.css">
        <link rel="stylesheet" href="/wcs-core/dist/wcs/wcs.css">
        <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    </head>
    <body>
        {{> navbar}}
        <main>
            {{$main}}{{/main}}
        </main>
        <div id="modal-zone">
        </div>
        <script src="https://unpkg.com/htmx.org@1.9.8"></script>
        <script src="https://unpkg.com/htmx.org/dist/ext/ws.js"></script>
        <script type="module">

            import { defineCustomElements } from '/wcs-core/loader/index.js'
            
            defineCustomElements()

            // les éléments <wcs-input> ne sont pas des <input> standards, donc les éléments <form> ne les prennent pas
            // en compte par défaut.
            // on peut customiser le comportement de HTMX pour supporter cela lors de la configuration des requêtes
            // faites avec hx-<method>.
            function bindWcsInputsToRequests(htmxConfigRequestEvent){
                const { target, parameters } = htmxConfigRequestEvent.detail
                
                for (const input of target.querySelectorAll('wcs-input[name]'))
                    parameters[input.getAttribute('name')] = input.value
            }

            document.body.addEventListener('htmx:configRequest', event => {
                bindWcsInputsToRequests(event)
            })

            // le même traitement doit s'appliquer avec les messages WebSocket envoyés avec ws-send
            function bindWcsInputsToWsMessages(htmxWsConfigSendEvent){
                const { elt: target } = htmxWsConfigSendEvent.detail

                htmxWsConfigSendEvent.detail.messageBody = JSON.stringify(Object.fromEntries(
                    Array.from(target.querySelectorAll('wcs-input[name]'))
                        .map(input => [input.getAttribute('name'), input.value])
                ))
            }

            document.body.addEventListener('htmx:wsConfigSend', event => {
                bindWcsInputsToWsMessages(event)
            })
        </script>
    </body>
</html>