{"version":3,"file":"com-nav-utils.js","sourceRoot":"","sources":["../../../src/components/com-nav/com-nav-utils.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AACH,MAAM,UAAU,sCAAsC,CAA+B,cAAmC,EAAE,eAAuB;EAC7I,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;IACnC,aAAa,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC,GAAe,EAAE,EAAE;MAC3D,MAAM,oBAAoB,GAAG,GAAG,CAAC,aAA4B,CAAC;MAC9D,IAAI,CAAC,6BAA6B,CAAC,aAAa,EAAE,oBAAoB,CAAC,EAAE;QACrE,MAAM,iBAAiB,GAAI,GAAa,CAAC,YAAY,EAAE,CAAC;QACxD,IAAI,uCAAuC,CAAC,iBAAiB,EAAE,eAAe,CAAC,EAAE;UAC5E,iBAAiB,CAAC,MAAM,CAAC,yBAAyB,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAkB,CAAC,KAAK,EAAE,CAAC;SACrG;OACJ;IACL,CAAC,CAAC,CAAA;EACN,CAAC,CAAC,CAAC;AACP,CAAC;AAED,SAAS,6BAA6B,CAAC,aAAsB,EAAE,OAAgB;EAC3E,OAAO,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC3C,CAAC;AAED,SAAS,yBAAyB,CAAC,QAAgB;EAC/C,OAAO,CAAC,CAAC,EAAE,CAAE,CAAiB,CAAC,QAAQ,KAAK,QAAQ,CAAC;AACzD,CAAC;AAED,SAAS,uCAAuC,CAAC,iBAAgC,EAAE,QAAgB;EAC/F,OAAO,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAE,CAAiB,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;AAC5F,CAAC","sourcesContent":["/**\n * This function add event handlers on the navigableItems list. The handlers call the function close() on the nodeName.\n *\n * T: type class of the nodeNameToClose param (must have a close function)\n *\n * @param navigableItems items on which focusout event listeners must be added\n * @param nodeNameToClose nodeName of the element we want to close in the event path\n */\nexport function registerCloseHandlerForFocusOutEventOn<T extends {close: () => any}>(navigableItems: NodeListOf<Element>, nodeNameToClose: string): void {\n    navigableItems.forEach(navigableItem => {\n        navigableItem.addEventListener(\"focusout\", (evt: FocusEvent) => {\n            const relatedTargetElement = evt.relatedTarget as HTMLElement;\n            if (!isElementChildOfNavigableItem(navigableItem, relatedTargetElement)) {\n                const eventComposedPath = (evt as Event).composedPath();\n                if (isEventThrownFromChildOfNodeNameToClose(eventComposedPath, nodeNameToClose)) {\n                    (eventComposedPath.filter(eventTargetNodeNameEquals(nodeNameToClose))[0] as unknown as T).close();\n                }\n            }\n        })\n    });\n}\n\nfunction isElementChildOfNavigableItem(navigableItem: Element, element: Element) {\n    return navigableItem.contains(element);\n}\n\nfunction eventTargetNodeNameEquals(nodeName: string) {\n    return x => (x as HTMLElement).nodeName === nodeName;\n}\n\nfunction isEventThrownFromChildOfNodeNameToClose(eventComposedPath: EventTarget[], nodeName: string) {\n    return eventComposedPath.map(x => (x as HTMLElement).nodeName).indexOf(nodeName) !== -1;\n}\n"]}