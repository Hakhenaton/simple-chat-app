{"version":3,"file":"select-option.js","sourceRoot":"","sources":["../../../src/components/select-option/select-option.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAoC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEnH,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAC,UAAU,EAAE,gBAAgB,EAAE,UAAU,EAAC,MAAM,qBAAqB,CAAC;AAE7E;;GAEG;AAKH,MAAM,OAAO,YAAY;;IAEb,mBAAc,GAAW,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;oBAGhB,KAAK;oBAGL,KAAK;;;;oBAiBL,KAAK;;EAWxD,iBAAiB;IACb,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;MAC1B,yDAAyD;MACzD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,IAAI,EAAE,CAAC;KACxC;EACL,CAAC;EAED,gBAAgB;IACZ,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;EAC5C,CAAC;EAEO,YAAY,CAAC,KAAc;IAC/B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MAChB,KAAK,CAAC,eAAe,EAAE,CAAC;MACxB,4DAA4D;MAC5D,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC;MACtC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC;QAC3B,MAAM,EAAE,IAAI,CAAC,EAAE;QACf,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,WAAW;OACd,CAAC,CAAC;KACN;EACL,CAAC;EAGD,WAAW,CAAC,KAAiB;IACzB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;EAC7B,CAAC;EAED;;;KAGG;EAEH,aAAa,CAAC,KAAoB;IAC9B,IAAG,UAAU,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;MACvC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;MACzB,KAAK,CAAC,cAAc,EAAE,CAAC;MACvB,KAAK,CAAC,eAAe,EAAE,CAAC;KAC3B;EACL,CAAC;EAED,MAAM;IACF,OAAO,CACH,EAAC,IAAI,IAAC,EAAE,EAAE,IAAI,CAAC,cAAc,mBAAiB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,EAAC,mBAAmB,EAAC,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAC,IAAI;MAC/H,IAAI,CAAC,QAAQ;QACV,oBAAc,QAAQ,EAAC,IAAI,EAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,GAAiB;MAEvE,eAAQ,CACL,CACV,CAAC;EACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, Element, Event, Prop, EventEmitter, ComponentInterface, h, Host, Listen } from '@stencil/core';\nimport { SelectOptionChosedEvent } from './select-option-interface';\nimport { MDCRipple } from '@material/ripple';\nimport {isEnterKey, generateUniqueId, isSpaceKey} from \"../../utils/helpers\";\n\n/**\n * Select option component, use in conjunction with wcs-select.\n */\n@Component({\n    tag: 'wcs-select-option',\n    styleUrl: 'select-option.scss'\n})\nexport class SelectOption implements ComponentInterface {\n    @Element() private el!: HTMLWcsSelectOptionElement;\n    private selectOptionId: string = generateUniqueId(this.el.tagName);\n\n    /** Wether this option can be selected. */\n    @Prop({ mutable: true, reflect: true }) disabled = false;\n\n    /** Wether this option is selected. */\n    @Prop({ mutable: true, reflect: true }) selected = false;\n\n    /** The option value, not what's displayed, use inner text instead. */\n    @Prop() value?: any;\n\n    /** Chip's displayed text color. */\n    @Prop() chipColor?: string;\n\n    /** Chip's background color. */\n    @Prop() chipBackgroundColor?: string;\n\n    /**\n     * This property musn't be set by hand, it is used by the `wcs-select` component.\n     * If you want a multiple select, set `multiple` attribute on the parent select instead.\n     * @internal\n     * @ignore\n     */\n    @Prop({ reflect: true, mutable: true }) multiple = false;\n\n    // @ts-ignore\n    private mdcRipple: MDCRipple;\n\n    @Event({\n        eventName: 'wcsSelectOptionClick',\n    })\n    // TODO: find a better name ?\n    wcsSelectOptionClick: EventEmitter<SelectOptionChosedEvent>;\n\n    componentWillLoad() {\n        if (this.value === undefined) {\n            // If no value was given we use the text content instead.\n            this.value = this.el.innerText || '';\n        }\n    }\n\n    componentDidLoad() {\n        this.mdcRipple = new MDCRipple(this.el);\n    }\n\n    private chooseOption(event: UIEvent) {\n        if (!this.disabled) {\n            event.stopPropagation();\n            // We select inner HTML as it's what's passed into the slot.\n            const displayText = this.el.innerText;\n            this.wcsSelectOptionClick.emit({\n                source: this.el,\n                value: this.value,\n                displayText\n            });\n        }\n    }\n\n    @Listen('mousedown')\n    onMouseDown(event: MouseEvent) {\n        this.chooseOption(event);\n    }\n\n    /**\n     * Handles the keydown event to update the selection.\n     * @param event keyboard event\n     */\n    @Listen('keydown')\n    handleKeydown(event: KeyboardEvent) {\n        if(isEnterKey(event) || isSpaceKey(event)) {\n            this.chooseOption(event);\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    render() {\n        return (\n            <Host id={this.selectOptionId} aria-selected={this.selected ? 'true' : 'false'} slot=\"wcs-select-option\" role=\"option\" tabindex=\"-1\">\n                {this.multiple &&\n                    <wcs-checkbox tabindex=\"-1\" checked={this.selected}></wcs-checkbox>\n                }\n                <slot />\n            </Host>\n        );\n    }\n}\n"]}