{"version":3,"file":"modal.js","sourceRoot":"","sources":["../../../src/components/modal/modal.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAgB,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAQtF,MAAM,OAAO,KAAK;;2BAIoC,KAAK;gBAKhB,KAAK;2BAWM,KAAK;gBAM7B,GAAG;uBAKiB,KAAK;;EAEnD,MAAM;IACF,OAAO,CACH,EAAC,IAAI;MACD,WAAK,KAAK,EAAC,qBAAqB,eAAY,IAAI,CAAC,IAAI;QACjD,WAAK,KAAK,EAAC,kBAAkB;UACzB;YACI,YAAM,IAAI,EAAC,QAAQ,GAAQ,CAC1B;UACJ,IAAI,CAAC,eAAe,IAAI,CACrB,kBAAY,KAAK,EAAC,OAAO,EAAC,IAAI,EAAC,OAAO,EAAC,KAAK,EAAC,UAAU,EAC3C,OAAO,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC;YAC5D,oBAAc,IAAI,EAAC,OAAO,GAAgB,CACjC,CAAC,CAGhB;QACN,WAAK,KAAK,EAAC,mBAAmB;UAC1B,eAAa,CACX;QACL,CAAC,IAAI,CAAC,WAAW,IAAI,CAClB,WAAK,KAAK,EAAC,mBAAmB;UAC1B,YAAM,IAAI,EAAC,SAAS,GAAQ,CAC1B,CAAC,CAET,CACH,CACV,CAAC;EACN,CAAC;EAIO,SAAS,CAAC,KAAoB;IAClC,IAAI,IAAI,CAAC,eAAe,IAAI,KAAK,CAAC,GAAG,KAAK,QAAQ,EAAE;MAChD,IAAI,CAAC,KAAK,EAAE,CAAC;KAChB;EACL,CAAC;EAEO,kBAAkB,CAAC,CAAa;IACpC,IAAI,CAAC,KAAK,EAAE,CAAC;EACjB,CAAC;EAEO,KAAK;IACT,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IAClB,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;EAChC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, Event, EventEmitter, h, Host, Listen, Prop } from '@stencil/core';\nimport { ModalSize } from './modal-interface';\n\n@Component({\n    tag: 'wcs-modal',\n    styleUrl: 'modal.scss',\n    shadow: false,\n})\nexport class Modal {\n    /**\n     * Specifies whether the component should display a backdrop on the entire page\n     */\n    @Prop({reflect: true}) withoutBackdrop: boolean = false;\n\n    /**\n     * Displays the modal\n     */\n    @Prop({reflect: true}) show: boolean = false;\n\n    /**\n     * Triggered when the user leaves the dialog with the closing button.\n     */\n    @Event() wcsDialogClosed: EventEmitter<void>;\n\n    /**\n     * Specifies whether the component should display a close button.\n     * if false, it won't close the modal when the escape key is pressed.\n     */\n    @Prop({reflect: true}) showCloseButton: boolean = false;\n\n    /**\n     * There are multiple sizes for modals. The default size is medium (m), however other sizes are available. Select the\n     * size best suited for the content and screen size displaying the modal. Remember to test responsiveness.\n     */\n    @Prop() size: ModalSize = 'm';\n\n    /**\n     * Specifies whether the component should hide the actions slot or not\n     */\n    @Prop({reflect: true}) hideActions: boolean = false;\n\n    render() {\n        return (\n            <Host>\n                <div class=\"wcs-modal-container\" data-size={this.size}>\n                    <div class=\"wcs-modal-header\">\n                        <h5>\n                            <slot name=\"header\"></slot>\n                        </h5>\n                        {this.showCloseButton && (\n                            <wcs-button shape=\"round\" mode=\"clear\" class=\"wcs-dark\"\n                                        onClick={($event) => this.onCloseButtonClick($event)}>\n                                <wcs-mat-icon icon=\"close\"></wcs-mat-icon>\n                            </wcs-button>)\n                        }\n\n                    </div>\n                    <div class=\"wcs-modal-content\">\n                        <slot></slot>\n                    </div>\n                    {!this.hideActions && (\n                        <div class=\"wcs-modal-actions\">\n                            <slot name=\"actions\"></slot>\n                        </div>)\n                    }\n                </div>\n            </Host>\n        );\n    }\n\n    @Listen('keydown', {target: 'document'})\n    // @ts-ignore\n    private onKeyDown(event: KeyboardEvent) {\n        if (this.showCloseButton && event.key === 'Escape') {\n            this.close();\n        }\n    }\n\n    private onCloseButtonClick(_: MouseEvent) {\n        this.close();\n    }\n\n    private close() {\n        this.show = false;\n        this.wcsDialogClosed.emit();\n    }\n}\n"]}