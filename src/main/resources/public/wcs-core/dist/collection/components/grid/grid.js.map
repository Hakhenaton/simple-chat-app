{"version":3,"file":"grid.js","sourceRoot":"","sources":["../../../src/components/grid/grid.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    ComponentDidLoad,\n    ComponentInterface,\n    Element,\n    Event,\n    EventEmitter,\n    forceUpdate,\n    h,\n    Host,\n    Listen,\n    Prop,\n    State,\n    VNode,\n    Watch\n} from '@stencil/core';\nimport {\n    getSortOrderInteger,\n    HyperFunc,\n    WcsGridAllRowSelectedEventDetails,\n    WcsGridCell,\n    WcsGridColumnSortChangeEventDetails,\n    WcsGridPaginationChangeEventDetails,\n    WcsGridRow,\n    WcsGridRowData,\n    WcsGridRowSelectedEventDetails,\n    WcsGridSelectionConfig\n} from './grid-interface';\nimport { v4 as uuid } from 'uuid';\nimport { cloneDeep, isEqual, get } from 'lodash-es';\nimport { GridPagination } from '../grid-pagination/grid-pagination';\n\n/**\n * The grid component is a complex component used as an HTML table to display collections of data.\n *\n * @cssprop --wcs-grid-highlight-color - Color for selected rows\n * @cssprop --wcs-grid-column-border-left - Left border of all grid headers\n * @slot grid-column - The slot containing the column of the grid in the `<thead>`\n * @slot grid-pagination - The slot containing the pagination of the grid below the `<table>`\n */\n@Component({\n    tag: 'wcs-grid',\n    styleUrl: 'grid.scss',\n    shadow: true\n})\nexport class Grid implements ComponentInterface, ComponentDidLoad {\n    @Element() private el!: HTMLWcsGridElement;\n    /**\n     * Manage sort and pagination with a backend server when set to `true`\n     */\n    @Prop() serverMode: boolean = false;\n    /**\n     * Contains the data to display in the table from a js object\n     */\n    @Prop() data: any[];\n    /**\n     * Flag to display a spinner during data loading\n     */\n    @Prop() loading: boolean;\n    /**\n     * Used to manage grid's row selection.  \n     * \"none\": no row can be selected.  \n     * \"multiple\": several rows can be selected.  \n     * \"single\": one row only can be selected.  \n     */\n    @Prop() selectionConfig: WcsGridSelectionConfig = 'none';\n    /**\n     * Set the selected items (rows)\n     */\n    @Prop() selectedItems: any | any[] = [];\n    /**\n     * Automatically set by the component to reference the wcs-grid-pagination HTML element by its id.\n     */\n    @Prop() wcsGridPaginationId: string;\n    /**\n     * Name of the object's key that will be used to display the cells whose `keyValue` attribute matches to the\n     * object's value for this key.\n     */\n    @Prop() rowIdPath: string;\n    @State() private columns: HTMLWcsGridColumnElement[];\n    @State() private paginationEl: HTMLWcsGridPaginationElement;\n    /**\n     * Rows to display, contains user data and meta data\n     */\n    @State() private rows: WcsGridRow[] = [];\n    /**\n     * Event emitted when a row is selected or unselected\n     */\n    @Event() wcsGridSelectionChange!: EventEmitter<WcsGridRowSelectedEventDetails>;\n    /**\n     * Event emitted when all rows are selected or unselected\n     */\n    @Event() wcsGridAllSelectionChange!: EventEmitter<WcsGridAllRowSelectedEventDetails>;\n\n    @Watch('data')\n    onDataChange(newValue: any[]): void {\n        this.updateGridRows(newValue);\n        this.refreshSort(false);\n    }\n\n    @Watch('selectedItems')\n    onSelectedItemsPropertyChange(newValue: any | any[]) {\n        this.updateSelectionWithValues(newValue);\n    }\n\n    @Listen('wcsHiddenChange')\n    onHiddenColumnChange(): void {\n        // We use forceUpdate because the fact of hiding a column or not does not modify the internal structure of the grid (WcsGridRow).\n        // Hide a column only impacts the way it is rendered but the grid-column remains in the dom and in our internal model.\n        forceUpdate(this);\n    }\n\n    private updateSelectionWithValues(values: any | any[]) {\n        if (this.selectionConfig === 'single') {\n            this.rows.map(r => r.selected = false);\n            for (const row of this.rows) {\n                if (isEqual(row.data, values)) {\n                    row.selected = true;\n                    break; // only one line can be selected\n                }\n            }\n        } else if (this.selectionConfig === 'multiple') {\n            this.rows.map(r => r.selected = false);\n            for (const row of this.rows) {\n                if (values.find(x => isEqual(x, row.data))) {\n                    row.selected = true;\n                }\n            }\n        }\n        this.rows = cloneDeep(this.rows);\n    }\n\n    private wcsGridRowToWcsGridRowData(row: WcsGridRow): WcsGridRowData {\n        return {selected: row.selected, page: row.page, data: row.data};\n    }\n\n    private updateGridRows(data: any[]): void {\n        const rows: WcsGridRow[] = [];\n        if (data && this.columns) {\n            // eslint-disable-next-line @typescript-eslint/prefer-for-of\n            for (let i = 0; i < data.length; i++) {\n                const row: WcsGridRow = {\n                    uuid: uuid(),\n                    data: data[i],\n                    selected: false,\n                    cells: []\n                };\n                for (const column of this.columns) {\n                    row.cells.push({\n                        content: get(data[i], column.path),\n                        column,\n                        formatter: column.formatter\n                    })\n                }\n                rows.push(row);\n            }\n            this.rows = rows;\n            this.updatePageIndex();\n        }\n    }\n\n    componentDidLoad(): void {\n        this.columns = this.getGridColumnsFromTemplate();\n        this.paginationEl = this.wcsGridPaginationId\n            ? document.getElementById(this.wcsGridPaginationId) as HTMLWcsGridPaginationElement\n            : this.getGridPaginationsFromTemplate()[0];\n        this.updateGridRows(this.data);\n        if (this.selectedItems) {\n            this.updateSelectionWithValues(this.selectedItems);\n        }\n        this.refreshSort(true);\n    }\n\n    /**\n     * Handle existing column's filters (defined before the grid is instantiated)\n     * @private\n     */\n    private refreshSort(refreshOthersColmumnsSortOrderState: boolean) {\n        //fixme: why the column property can be null or undefined?\n        if (this.columns) {\n            const [first, ...other] = this.columns.filter(c => c.sortOrder !== 'none');\n            if (first && !this.serverMode) {\n                this.sortBy(first);\n            }\n            refreshOthersColmumnsSortOrderState && this.disableSortOrderForColumns(other);\n        }\n    }\n\n    private disableSortOrderForColumns(columns: HTMLWcsGridColumnElement[] | null | undefined): void {\n        columns?.forEach(c => c.sortOrder = 'none');\n    }\n\n    private getGridColumnsFromTemplate(): HTMLWcsGridColumnElement[] {\n        const slotted = this.el.shadowRoot.querySelector('slot[name=\"grid-column\"]') as HTMLSlotElement;\n        return slotted.assignedElements() as any as HTMLWcsGridColumnElement[];\n    }\n\n    private getGridPaginationsFromTemplate(): HTMLWcsGridPaginationElement[] {\n        const slotted = this.el.shadowRoot.querySelector('slot[name=\"grid-pagination\"]') as HTMLSlotElement;\n        return slotted.assignedElements() as any as HTMLWcsGridPaginationElement[];\n    }\n\n    @Listen('wcsSortChange')\n    sortChangeEventHandler(event: CustomEvent<WcsGridColumnSortChangeEventDetails>): void {\n        if (event.detail.order === 'none') return;\n        // We keep only one active sort column\n        this.disableSortOrderForColumns(this.columns.filter(c => c !== event.detail.column));\n        if (this.serverMode) return;\n        this.sortBy(event.detail.column);\n        this.updatePageIndex();\n    }\n\n    /**\n     * Sorts the grid rows according to the given column's configuration\n     * @param colmun Column from which to extract the sorting configuration\n     * @private\n     */\n    private sortBy(colmun: HTMLWcsGridColumnElement) {\n        if (colmun.sortFn) {\n            this.rows = cloneDeep(this.rows)\n                .sort((a: any, b: any) => colmun.sortFn(a.data, b.data, colmun) * getSortOrderInteger(colmun.sortOrder));\n        } else {\n            this.rows = cloneDeep(this.rows)\n                .sort((a: any, b: any) => {\n                    const path = colmun.path;\n                    return ((get(a.data, path) < get(b.data, path)) ? -1 : (get(a.data, path) > get(b.data, path)) ? 1 : 0) * getSortOrderInteger(colmun.sortOrder);\n                });\n        }\n    }\n\n    /**\n     * Update the page's number of all rows\n     */\n    private updatePageIndex(): void {\n        if (!this.serverMode && this.paginationEl) {\n            this.paginationEl.itemsCount = this.data.length;\n            this.paginationEl.pageCount = Math.ceil(this.data.length / this.paginationEl.pageSize);\n\n            if (this.paginationEl.pageCount <= 1) {\n                this.paginationEl.currentPage = GridPagination.INDEX_FIRST_PAGE;\n            } else if (this.paginationEl.pageCount > 0 && this.paginationEl.currentPage + 1 > this.paginationEl.pageCount) {\n                this.paginationEl.currentPage = this.paginationEl.pageCount - 1;\n            }\n\n            const rows = cloneDeep(this.rows);\n            rows.forEach((row: WcsGridRow, index: number) =>\n                row.page = Math.floor(index / this.paginationEl.pageSize)\n            );\n            this.rows = [...rows];\n        }\n    }\n\n    @Listen('wcsGridPaginationChange')\n    paginationChangeEventHandler(): void {\n        this.onPaginationChange();\n    }\n\n    @Listen('wcsGridPaginationChange', {target: 'window'})\n    paginationChangeEventHandlerOutside(event: CustomEvent<WcsGridPaginationChangeEventDetails>): void {\n        if (this.wcsGridPaginationId && this.wcsGridPaginationId === (event.target as HTMLElement).id) {\n            this.onPaginationChange();\n        }\n    }\n\n    private onPaginationChange(): void {\n        if (this.serverMode) return;\n        this.updatePageIndex();\n    }\n\n    private onRowSelection(row: WcsGridRow): void {\n        if (this.selectionConfig === 'single') {\n            this.rows.filter(r => r.uuid !== row.uuid).map(r => r.selected = false);\n        }\n        row.selected = !row.selected;\n        if (this.selectionConfig !== 'single' || row.selected) {\n            this.wcsGridSelectionChange.emit({row: this.wcsGridRowToWcsGridRowData(row)});\n        }\n        this.rows = cloneDeep(this.rows);\n    }\n\n    private selectAllRows(): void {\n        const rows = this.getRowsForCurrentPage();\n        const selected = !this.allRowsAreSelected();\n        rows.map(r => r.selected = selected);\n        this.wcsGridAllSelectionChange.emit({rows: selected ? rows.map(row => this.wcsGridRowToWcsGridRowData(row)) : []});\n        this.rows = cloneDeep(this.rows);\n    }\n\n    private allRowsAreSelected(): boolean {\n        const rows = this.getRowsForCurrentPage();\n        return rows.length > 0 && rows.filter(row => row.selected).length === rows.length;\n    }\n\n    private getRowsForCurrentPage(): WcsGridRow[] {\n        if (this.paginationEl) {\n            return this.rows.filter(row => row.page === this.paginationEl.currentPage);\n        }\n        return this.rows;\n    }\n\n    renderSelectionColumn(row: WcsGridRow): any {\n        switch (this.selectionConfig) {\n            case 'none':\n                return;\n            case 'single':\n                return <td>\n                    <wcs-radio checked={row.selected} onClick={this.onRowSelection.bind(this, row)}/>\n                </td>;\n            case 'multiple':\n                return <td>\n                    <wcs-checkbox checked={row.selected} onWcsChange={this.onRowSelection.bind(this, row)}/>\n                </td>;\n        }\n    }\n\n    private getCellContent(row: WcsGridRow, cell: WcsGridCell): HTMLElement | HTMLElement[] | string | void {\n        if (cell.formatter) {\n            return cell.formatter(\n                (h as unknown) as HyperFunc<VNode>,\n                cell.column,\n                this.wcsGridRowToWcsGridRowData(row)\n            );\n        }\n        return cell.content;\n    }\n\n    private totalColumnCount() {\n        if (!this.columns) {\n            return 0;\n        }\n        return this.columns.length + (this.selectionConfig === 'none' ? 0 : 1);\n    }\n\n    render(): any {\n        return (\n            <Host>\n                {\n                    <table>\n                        <thead>\n                        {\n                            this.selectionConfig === 'none' ? ''\n                                : <th class=\"wcs-grid-selection-column\">\n                                    {\n                                        this.selectionConfig === 'single' ? '' :\n                                            <wcs-checkbox checked={this.allRowsAreSelected()}\n                                                          onWcsChange={this.selectAllRows.bind(this)}/>\n                                    }\n                                </th>\n                        }\n                        <slot name=\"grid-column\"></slot>\n                        </thead>\n                        <tbody>\n                        {\n                            this.loading\n                                ? <tr>\n                                    <td colSpan={this.totalColumnCount()} class=\"loading\">\n                                        <wcs-spinner></wcs-spinner>\n                                    </td>\n                                </tr>\n                                : this.rows\n                                    ?.filter(row => this.serverMode || !this.paginationEl || row.page === this.paginationEl.currentPage)\n                                    .map(row =>\n                                        this.renderRow(row)\n                                    )\n                        }\n                        </tbody>\n                    </table>\n                }\n                <slot name=\"grid-pagination\"></slot>\n            </Host>\n        );\n    }\n\n    private renderRow(row: WcsGridRow) {\n        return <tr class={row.selected ? 'selected' : ''}>\n            {this.renderSelectionColumn(row)}\n            {row.cells?.map(cell => {\n                    if (cell.column.hidden) {\n                        return;\n                    }\n                    return cell.column.customCells\n                        ? (<td>\n                            <slot name={cell.column.id + '-' + row.data[this.rowIdPath]}/>\n                        </td>)\n                        : (<td part={cell.column.path + '-column'}>{this.getCellContent(row, cell)}</td>)\n                }\n            )}\n        </tr>;\n    }\n}\n\n/**\n * Pour resize le tableau\n * https://www.brainbell.com/javascript/making-resizable-table-js.htmls\n *\n */\n"]}