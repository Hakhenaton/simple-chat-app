{"version":3,"file":"editable-field-interface.js","sourceRoot":"","sources":["../../../src/components/editable-field/editable-field-interface.tsx"],"names":[],"mappings":"AAeA,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,GAAG,EAAE,GAAG,CAAU,CAAC,CAAC,iGAAiG;AAIhK,MAAM,UAAU,sBAAsB,CAAC,IAAY;EAC/C,kFAAkF;EAClF,OAAO,0BAA0B,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACrD,CAAC","sourcesContent":["import { WcsSize } from '../../shared-types';\n\nexport type ValidateFn<T> = (value: T) => boolean;\nexport type FormatFn<T> = (value: T) => string;\n\nexport interface EditableComponentUpdateEvent {\n    newValue: any; // We use any for now, but when components typings will support template, change for parameterized type\n    /**\n     * Permet de sortir de l'état LOAD pour aller vers l'état DISPLAY\n     * À n'utiliser que lorsque la valeur n'est pas systématiquement mise à jour à chaque événement.\n     */\n    successHandler: () => void;\n    errorhandler: () => void;\n}\n\nexport const WcsEditableFieldSizeValues = ['m', 'l'] as const; // as const keyword is used to infer and preserve the exact literal values of an array or object.\n\nexport type WcsEditableFieldSize = Extract<WcsSize, typeof WcsEditableFieldSizeValues[number]>;\n\nexport function isWcsEditableFieldSize(size: string): size is WcsEditableFieldSize {\n    // @ts-ignore : ignore size type, as it is checked with WcsEditableFieldSizeValues\n    return WcsEditableFieldSizeValues.includes(size);\n}\n\nexport type EditableFieldType = 'input' | 'textarea' | 'select';\n"]}