{"version":3,"file":"horizontal-step.js","sourceRoot":"","sources":["../../../src/components/horizontal-stepper/horizontal-step.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAuB,CAAC,EAAE,MAAM,eAAe,CAAC;AAcvD,MAAM,CAAC,MAAM,cAAc,GAA6C,CACpE,EACI,IAAI,EACJ,eAAe,EACf,QAAQ,EACR,MAAM,EACN,MAAM,EACN,KAAK,EACL,OAAO,EACP,OAAO,EACV,EAAE,EAAE;EACL,OAAO,CACH,WAAK,KAAK,EAAC,cAAc,gBAAa,KAAK;IACtC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,wBAAkB,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAqB,CAAC;IAChF,kBAAY,KAAK,EAAE,EAAC,iBAAiB,EAAE,OAAO,EAAC,EACnC,KAAK,EAAC,OAAO,EACb,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAC3B,IAAI,EAAE,CAAC,MAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EACjE,QAAQ,EAAE,OAAO,IAAG,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAc,CAC5G,CACT,CAAC;AACN,CAAC,CAAA;AAED,MAAM,gBAAgB,GAAG,CAAC,UAAsB,EAAE,eAAwB,EAAE,QAAiB,EAAE,MAAe,EAAE,EAAE;EAC9G,IAAI,eAAe,IAAI,QAAQ,IAAI,CAAC,MAAM,EAAE;IACxC,OAAO,CAAC,oBAAc,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,MAAM,EAAC,MAAM,EAAC,UAAU,GAAgB,CAAC,CAAC;GACjF;EACD,QAAQ,UAAU,CAAC,IAAI,EAAE;IACrB,KAAK,MAAM;MACP,OAAO,CAAC,oBAAc,IAAI,EAAC,GAAG,EAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,EAClC,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,GAAiB,CAAC,CAAC;IACvG,KAAK,MAAM;MACP,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;GAChC;AACL,CAAC,CAAA","sourcesContent":["import { FunctionalComponent, h } from '@stencil/core';\nimport { HorizontalStepConfig, StepButton } from './horizontal-stepper-interface';\n\ninterface HorizontalStepProps {\n    step: HorizontalStepConfig;\n    checkOnComplete: boolean;\n    complete: boolean;\n    passed: boolean;\n    active: boolean;\n    first: boolean;\n    disable: boolean;\n    onClick: (step: HorizontalStepConfig) => void;\n}\n\nexport const HorizontalStep: FunctionalComponent<HorizontalStepProps> = (\n    {\n        step,\n        checkOnComplete,\n        complete,\n        passed,\n        active,\n        first,\n        disable,\n        onClick\n    }) => {\n    return (\n        <div class=\"graphic-step\" data-first={first}>\n            {first ? null : (<wcs-progress-bar value={passed ? 100 : 0}></wcs-progress-bar>)}\n            <wcs-button style={{'backgroundColor': 'white'}}\n                        shape=\"round\"\n                        onClick={_ => onClick(step)}\n                        mode={(active || complete) && !step.disable ? 'plain' : 'stroked'}\n                        disabled={disable}>{getButtonContent(step.button, checkOnComplete, complete, active)}</wcs-button>\n        </div>\n    );\n}\n\nconst getButtonContent = (stepButton: StepButton, checkOnComplete: boolean, complete: boolean, active: boolean) => {\n    if (checkOnComplete && complete && !active) {\n        return (<wcs-mat-icon size=\"m\" icon=\"done\" family=\"outlined\"></wcs-mat-icon>);\n    }\n    switch (stepButton.kind) {\n        case 'Icon':\n            return (<wcs-mat-icon size=\"m\" icon={stepButton.iconName}\n                                  family={stepButton.family ? stepButton.family : 'outlined'}></wcs-mat-icon>);\n        case 'Text':\n            return (stepButton.text);\n    }\n}\n\n"]}