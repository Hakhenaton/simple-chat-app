{"version":3,"names":["WcsEditableFieldSizeValues","isWcsEditableFieldSize","size","includes","editableFieldCss","EditableComponentState","EditableField","this","spiedElement","currentValue","DISPLAY","componentWillLoad","console","error","join","value","componentDidRender","assignedElements","el","shadowRoot","querySelector","type","initWithInput","initWithTextArea","initWithSelect","element","filter","x","tagName","Error","addChangeHandlerForWcsComponents","addEventListener","event","key","sendCurrentValue","discardChanges","ctrlKey","elt","stopImmediatePropagation","detail","validateFn","isError","currentState","EDIT","LOAD","wcsChange","emit","newValue","successHandler","forceDisplayStateAndValidate","errorhandler","errorHandler","onWindowClickEvent","clickInsideComponent","getBoundingClientRect","width","y","height","onValueChange","onDisplayContainerClick","readonly","DELAY_FOR_RENDER","setTimeout","setFocus","fitContent","render","formattedValue","formattedCurrentValue","formatValues","h","Host","class","label","onClick","icon","getReadonlySvgIcon","errorMsg","xmlns","viewBox","d","transform","formatFn","Array","isArray"],"sources":["./src/components/editable-field/editable-field-interface.tsx","./src/components/editable-field/editable-field.scss?tag=wcs-editable-field&encapsulation=shadow","./src/components/editable-field/editable-field.tsx"],"sourcesContent":["import { WcsSize } from '../../shared-types';\n\nexport type ValidateFn<T> = (value: T) => boolean;\nexport type FormatFn<T> = (value: T) => string;\n\nexport interface EditableComponentUpdateEvent {\n    newValue: any; // We use any for now, but when components typings will support template, change for parameterized type\n    /**\n     * Permet de sortir de l'état LOAD pour aller vers l'état DISPLAY\n     * À n'utiliser que lorsque la valeur n'est pas systématiquement mise à jour à chaque événement.\n     */\n    successHandler: () => void;\n    errorhandler: () => void;\n}\n\nexport const WcsEditableFieldSizeValues = ['m', 'l'] as const; // as const keyword is used to infer and preserve the exact literal values of an array or object.\n\nexport type WcsEditableFieldSize = Extract<WcsSize, typeof WcsEditableFieldSizeValues[number]>;\n\nexport function isWcsEditableFieldSize(size: string): size is WcsEditableFieldSize {\n    // @ts-ignore : ignore size type, as it is checked with WcsEditableFieldSizeValues\n    return WcsEditableFieldSizeValues.includes(size);\n}\n\nexport type EditableFieldType = 'input' | 'textarea' | 'select';\n",":host {\n    display: block;\n\n    .display-none {\n        display: none !important;\n    }\n\n    .label {\n        margin-bottom: var(--wcs-base-margin);\n        font-weight: 500;\n        font-size: var(--wcs-editable-field-font-size);\n        color: var(--wcs-gray-light);\n    }\n\n    .edit-container {\n        display: flex;\n        width: 100%;\n    }\n\n    .display-container {\n        box-sizing: border-box;\n        wcs-mat-icon {\n            display: none;\n        }\n        height: var(--wcs-editable-field-host-height);\n        white-space: break-spaces;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        background-color: var(--wcs-light);\n        border-radius: var(--wcs-border-radius);\n        font-size: var(--wcs-editable-field-font-size);\n        line-height: 1.5;\n        font-weight: 500;\n        color: var(--wcs-gray);\n        padding: var(--wcs-editable-field-host-padding);\n        transition: 0.175s all;\n        border: solid 2px transparent;\n    }\n\n    .load-container {\n        box-sizing: border-box;\n        height: var(--wcs-editable-field-host-height);\n        white-space: pre;\n        display: flex;\n        justify-content: space-between;\n        background-color: var(--wcs-light);\n        border-radius: var(--wcs-border-radius);\n        font-size: var(--wcs-editable-field-font-size);\n        line-height: 1.5;\n        font-weight: 500;\n        color: var(--wcs-gray);\n        padding: var(--wcs-editable-field-host-padding);\n        transition: 0.175s all;\n        border: solid 2px transparent;\n        align-items: center;\n    }\n\n    wcs-spinner {\n        height: 24px;\n        width: 24px;\n    }\n\n    .readonly-icon {\n        fill: var(--wcs-text-medium);\n    }\n}\n\n:host([readonly]) {\n    .display-container {\n        color: var(--wcs-gray-light);\n    }\n}\n\n:host(:not([readonly])) {\n    .display-container:hover {\n        wcs-mat-icon {\n            display: flex;\n            align-items: center;\n        }\n        color: var(--wcs-primary);\n        cursor: pointer;\n        border: dashed 2px var(--wcs-primary);\n    }\n}\n\n:host([size=l]) {\n    --wcs-editable-field-host-padding: var(--wcs-padding-l) calc(var(--wcs-padding) - var(--wcs-border-size));\n    --wcs-editable-field-host-height: var(--wcs-size-l);\n    --wcs-editable-field-font-size: 1.0625rem;\n}\n\n:host([size=m]) { // Default\n    --wcs-editable-field-host-padding: var(--wcs-padding-m) calc(var(--wcs-padding) - var(--wcs-border-size));\n    --wcs-editable-field-host-height: var(--wcs-size-m);\n    --wcs-editable-field-font-size: 1rem;\n}\n","import {\n    Component,\n    ComponentInterface,\n    EventEmitter,\n    h,\n    Prop,\n    Event,\n    State,\n    Host,\n    Element,\n    Watch, Listen\n} from '@stencil/core';\nimport {\n    EditableComponentUpdateEvent,\n    EditableFieldType,\n    FormatFn,\n    isWcsEditableFieldSize,\n    ValidateFn,\n    WcsEditableFieldSize,\n    WcsEditableFieldSizeValues\n} from './editable-field-interface';\n\nenum EditableComponentState {\n    DISPLAY,\n    EDIT,\n    LOAD\n}\n\n@Component({\n    tag: 'wcs-editable-field',\n    styleUrl: 'editable-field.scss',\n    shadow: true\n})\nexport class EditableField implements ComponentInterface {\n    @Element() private el!: HTMLWcsEditableFieldElement;\n\n    @State() private currentState: EditableComponentState = EditableComponentState.DISPLAY;\n    /**\n     * Specifies which component is used for editing\n     */\n    @Prop() type: EditableFieldType = 'input';\n    /**\n     * Label of the field\n     */\n    @Prop() label!: string;\n    /**\n     * event called at each (valid) update of the field.\n     */\n    @Event() wcsChange!: EventEmitter<EditableComponentUpdateEvent>;\n    /**\n     * Specify whether the field is editable or not\n     */\n    @Prop() readonly: boolean = false;\n    /**\n     * Initial value of the field\n     */\n    @Prop({mutable: true}) value: any;\n    /**\n     * Function to customize the validation of the data during the update\n     */\n    @Prop() validateFn: ValidateFn<any>;\n    /**\n     * Function used to format the value\n     */\n    @Prop() formatFn: FormatFn<any>;\n\n    /**\n     * Error message displayed under the field if validation failed.\n     */\n    @Prop() errorMsg: string = null;\n\n    /**\n     * Specify the size (height) of the editable field.\n     */\n    @Prop({reflect: true}) size: WcsEditableFieldSize = 'm';\n\n    @State() private isError: boolean = false;\n\n    // fixme: why this attr is never read?\n    // ignoreNextChangeEvent: boolean = false;\n    private spiedElement: HTMLElement = null;\n    private currentValue: any = null;\n\n    componentWillLoad(): Promise<void> | void {\n        if(!isWcsEditableFieldSize(this.size)) {\n            console.error(`Invalid size value for wcs-editable-field : \"${this.size}\". Must be one of \"${WcsEditableFieldSizeValues.join(', ')}\"`);\n            this.size = \"m\"; // Default fallback value\n        }\n        this.currentValue = this.value;\n    }\n\n    componentDidRender() {\n        const assignedElements = (this.el.shadowRoot.querySelector('slot') as HTMLSlotElement).assignedElements();\n        switch (this.type) {\n            case 'input':\n                this.initWithInput(assignedElements);\n                break;\n            case 'textarea':\n                this.initWithTextArea(assignedElements);\n                break;\n            case 'select':\n                this.initWithSelect(assignedElements)\n                break;\n        }\n    }\n\n    private initWithInput(assignedElements: Element[]) {\n        const element = assignedElements.filter(x => {\n            return x.tagName === 'WCS-INPUT'\n        })[0];\n        if (!element) throw new Error('You must provide a slotted input element to handle edition');\n        this.spiedElement = element as HTMLElement;\n        this.addChangeHandlerForWcsComponents(this.spiedElement);\n        this.spiedElement.addEventListener('keydown', (event: KeyboardEvent) => {\n            if (event.key === 'Enter') {\n                this.sendCurrentValue();\n            }\n            if (event.key === 'Escape') {\n                this.discardChanges();\n            }\n        })\n    }\n\n    private initWithTextArea(assignedElements: Element[]) {\n        const element = assignedElements.filter(x => {\n            return x.tagName === 'WCS-TEXTAREA'\n        })[0];\n        if (!element) throw new Error('You must provide a slotted textarea element to handle edition');\n        this.spiedElement = element as HTMLElement;\n        this.addChangeHandlerForWcsComponents(this.spiedElement);\n        this.spiedElement.addEventListener('keydown', (event: KeyboardEvent) => {\n            if (event.key === 'Enter' && event.ctrlKey) {\n                this.sendCurrentValue();\n            }\n            if (event.key === 'Escape') {\n                this.discardChanges();\n            }\n        })\n    }\n\n    private initWithSelect(assignedElements: Element[]) {\n        const element = assignedElements.filter(x => {\n            return x.tagName === 'WCS-SELECT'\n        })[0];\n        if (!element) throw new Error('You must provide a slotted select element to handle edition');\n        this.spiedElement = element as HTMLElement;\n        this.addChangeHandlerForWcsComponents(this.spiedElement);\n    }\n\n    /**\n     * This method subscribes the component to the change events produced by the other WCS components\n     * (provided by the user in slot)\n     * @private\n     */\n    private addChangeHandlerForWcsComponents(elt: HTMLElement) {\n        elt.addEventListener('wcsChange', (event: CustomEvent) => {\n            event.stopImmediatePropagation();\n            this.currentValue = event.detail.value;\n            if (this.validateFn) {\n                this.isError = !this.validateFn(this.currentValue);\n            }\n        });\n    }\n\n\n    private sendCurrentValue() {\n        if (this.currentState === EditableComponentState.EDIT) {\n            if (this.value === this.currentValue) {\n                this.currentState = EditableComponentState.DISPLAY\n            } else {\n                this.isError = this.validateFn ? !this.validateFn(this.currentValue) : false;\n                if (!this.isError) {\n                    this.currentState = EditableComponentState.LOAD;\n                    this.wcsChange.emit({\n                        newValue: this.currentValue,\n                        successHandler: () => this.forceDisplayStateAndValidate(),\n                        errorhandler: () => this.errorHandler()\n                    });\n                }\n            }\n        }\n    }\n\n    private discardChanges() {\n        this.currentValue = this.value;\n        this.currentState = EditableComponentState.DISPLAY;\n        this.isError = false;\n    }\n\n\n    forceDisplayStateAndValidate() {\n        if (this.currentState === EditableComponentState.LOAD) {\n            this.value = this.currentValue;\n            this.currentState = EditableComponentState.DISPLAY;\n        } else {\n            throw new Error('You cannot set display state from ' + EditableComponentState[this.currentState] + ' state');\n        }\n    }\n\n    @Listen('click', {target: 'window'})\n    onWindowClickEvent(event: MouseEvent) {\n        if (!this.clickInsideComponent(event)) {\n            if (this.currentState === EditableComponentState.EDIT) {\n                if (this.isError) {\n                    this.discardChanges();\n                } else {\n                    this.sendCurrentValue();\n                }\n            }\n        }\n    }\n\n    private clickInsideComponent(event: MouseEvent) {\n        return event.x >= this.el.getBoundingClientRect().x && event.x <= this.el.getBoundingClientRect().x + this.el.getBoundingClientRect().width\n            && event.y >= this.el.getBoundingClientRect().y && event.y <= this.el.getBoundingClientRect().y + this.el.getBoundingClientRect().height;\n    }\n\n    /**\n     * discard changes and force component state to DISPLAY\n     * <br/>\n     * This method must be call when component is in LOAD state\n     */\n\n    errorHandler() {\n        this.discardChanges();\n    }\n\n    @Watch('value')\n    onValueChange(): void {\n        this.currentState = EditableComponentState.DISPLAY;\n    }\n\n    private onDisplayContainerClick() {\n        if (this.currentState === EditableComponentState.DISPLAY && this.readonly === false) {\n            this.currentState = EditableComponentState.EDIT;\n            // fixme: why this attr is never read?\n            // this.ignoreNextChangeEvent = true;\n            this.spiedElement['value'] = this.currentValue;\n            if (this.validateFn) {\n                this.isError = !this.validateFn(this.currentValue);\n            }\n            // We wait until the element is displayed on the page otherwise the focus does not work\n            const DELAY_FOR_RENDER = 20;\n            setTimeout(() => {\n                if (this.type === 'input') {\n                    (this.spiedElement as HTMLWcsInputElement).setFocus();\n                } else if (this.type === 'textarea') {\n                    (this.spiedElement as HTMLWcsTextareaElement).fitContent();\n                    (this.spiedElement as HTMLWcsTextareaElement).setFocus();\n                }\n            }, DELAY_FOR_RENDER)\n        }\n    }\n\n    render(): any {\n        const {formattedValue, formattedCurrentValue} = this.formatValues();\n        return (\n            <Host>\n                <div class=\"label\">{this.label}</div>\n                <div\n                    class={'display-container ' + (this.currentState !== EditableComponentState.DISPLAY ? 'display-none' : '')}\n                    onClick={() => this.onDisplayContainerClick()}>\n                    {formattedValue}\n                    <wcs-mat-icon icon=\"edit\" size=\"s\"></wcs-mat-icon>\n                    {this.readonly ? this.getReadonlySvgIcon() : null}\n                </div>\n                <div\n                    class={'load-container ' + (this.currentState !== EditableComponentState.LOAD ? 'display-none' : '')}>\n                    {formattedCurrentValue}\n                    <wcs-spinner></wcs-spinner>\n                </div>\n                <wcs-form-field is-error={this.isError}\n                                class={'edit-container ' + (this.currentState !== EditableComponentState.EDIT ? 'display-none' : '')}>\n                    <slot/>\n                    {\n                        this.isError && this.errorMsg\n                            ? <wcs-error>{this.errorMsg}</wcs-error>\n                            : null\n                    }\n                </wcs-form-field>\n            </Host>\n        );\n    }\n\n    private getReadonlySvgIcon() {\n        return <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"24\" viewBox=\"0 0 27 25\"\n                    class=\"readonly-icon\">\n            <path d=\"M26.79,25.05H1.21a.73.73,0,0,0,0,1.45H26.79a.73.73,0,0,0,0-1.45Z\"\n                  transform=\"translate(-0.5 -1.5)\"/>\n            <path\n                d=\"M19.8,8.87h-.61V6.73a5.23,5.23,0,0,0-10.46,0V8.87H8.2a1.63,1.63,0,0,0-1.63,1.62V21.32A1.62,1.62,0,0,0,8.2,22.94H19.8a1.62,1.62,0,0,0,1.63-1.62V10.49A1.63,1.63,0,0,0,19.8,8.87ZM10.93,6.73a3,3,0,1,1,6.06,0V8.87H10.93Zm3,14.15a5,5,0,1,1,5-5A5,5,0,0,1,14,20.88Z\"\n                transform=\"translate(-0.5 -1.5)\"/>\n            <path\n                d=\"M14,12.62a3.29,3.29,0,1,0,3.29,3.29A3.29,3.29,0,0,0,14,12.62Zm0,4.75a1.47,1.47,0,1,1,1.47-1.46A1.46,1.46,0,0,1,14,17.37Z\"\n                transform=\"translate(-0.5 -1.5)\"/>\n        </svg>;\n    }\n\n    private formatValues() {\n        let formattedValue = this.value;\n        let formattedCurrentValue = this.currentValue;\n        if (this.formatFn) {\n            formattedValue = this.formatFn(this.value);\n            formattedCurrentValue = this.formatFn(this.currentValue);\n        }\n        if (Array.isArray(this.value)) {\n            formattedValue = this.value.join(', ');\n        }\n        if (Array.isArray(this.currentValue)) {\n            formattedCurrentValue = this.currentValue.join(', ');\n        }\n        return {\n            formattedValue: (formattedValue ? (<span>{formattedValue}</span>) : (<span></span>)),\n            formattedCurrentValue: (formattedCurrentValue ? (<span>{formattedCurrentValue}</span>) : (<span></span>))\n        };\n    }\n}\n"],"mappings":"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"}