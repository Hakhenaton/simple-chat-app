{"version":3,"names":["GridSortArrow","state","h","style","marginLeft","xmlns","width","height","viewBox","type","fill","class","d","gridColumnCss","GridColumn","parseMyObjectProp","newValue","this","wcsHiddenChange","emit","sortOrderChange","_","emitSortConfig","sort","wcsSortChange","column","el","order","sortOrder","sortFn","render","Host","onClick","onSortClick","bind","slot","name"],"sources":["./src/components/grid-column/grid-sort-arrow.tsx","./src/components/grid-column/grid-column.scss?tag=wcs-grid-column&encapsulation=shadow","./src/components/grid-column/grid-column.tsx"],"sourcesContent":["import { FunctionalComponent, h } from '@stencil/core';\nimport { WcsSortOrder } from '../grid/grid-interface';\n\ninterface GridSortArrowProps {\n  state: WcsSortOrder;\n}\n\nexport const GridSortArrow: FunctionalComponent<GridSortArrowProps> = ({ state }) => (\n    <svg style={{ marginLeft: 'auto' }} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"20\" viewBox=\"0 0 24 20\">\n        <style type=\"text/css\">{`\n            .arrow-group {\n                transform-origin: 50% 51%;\n                transition: transform 175ms ease-in-out;\n            }\n            .arrow{\n                transition: fill 175ms ease-in-out;\n                fill: var(--wcs-text-light);\n            }\n            .asc {\n                transform: scaleY(1) translateY(-6px);\n            }\n            .desc {\n                transform: scaleY(-1) translateY(-6px);\n            }\n            .active {\n                fill: var(--wcs-primary);\n            }\n\n        `}</style>\n        <g fill=\"none\" class='asc arrow-group'>\n            <path class={(state === 'asc' ? 'active' : '') + ' arrow'} d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\" />\n            <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        </g>\n        <g fill=\"none\" class='desc arrow-group'>\n            <path class={(state === 'desc' ? 'active' : '') + ' arrow'} d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\" />\n            <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        </g>\n    </svg>\n);\n",":host {\n    --wcs-grid-column-border-left: solid 1px var(--wcs-text-light);\n\n    display: contents;\n\n    th {\n        color: var(--wcs-gray-dark);\n        background-color: var(--wcs-light);\n        border-left: var(--wcs-grid-column-border-left);\n        padding: calc(var(--wcs-padding) / 2) var(--wcs-padding);\n        text-align: left;\n\n        .grid-column-th-content {\n            display: inline-flex;\n            flex-direction: row;\n\n            span {\n                user-select: none;\n            }\n        }\n    }\n\n    .pointer {\n        cursor: pointer;\n    }\n}\n\n:host([sort-order=\"asc\"]) {\n    img {\n        transform: scaleY(1);\n    }\n}\n\n:host([sort-order=\"desc\"]) {\n    img {\n        transform: scaleY(-1);\n    }\n}\n\n:host([sort-order=\"none\"]) {\n    img {\n        display: none;\n    }\n\n    th:hover {\n        img {\n            display: inline-block;\n        }\n    }\n}\n\n:host([hidden]) {\n    display: none !important;\n}\n","import { Component, ComponentInterface, Element, Event, EventEmitter, h, Host, Prop, Watch } from '@stencil/core';\nimport { WcsCellFormatter, WcsGridColumnSortChangeEventDetails, WcsSortFn, WcsSortOrder } from '../grid/grid-interface';\nimport { GridSortArrow } from './grid-sort-arrow';\n\n/**\n * The grid column is a subcomponent of `wcs-grid` that represents a column of the table.\n * @cssprop --wcs-grid-column-border-left - Border separator between column names\n * @csspart [path]-column - CSS part for each column for styling. e.g: first_name-column, email-column\n */\n@Component({\n    tag: 'wcs-grid-column',\n    styleUrl: 'grid-column.scss',\n    shadow: true\n})\nexport class GridColumn implements ComponentInterface {\n    @Element() private el: HTMLWcsGridColumnElement;\n    /**\n     * Represents the name of the field from the `data` object (e.g: first_name, last_name, email, ...)\n     */\n    @Prop() path: string;\n    /**\n     * The name of the column displayed on the table (e.g: First Name, Last Name, Email, ...)\n     */\n    @Prop() name: string;\n    /**\n     * Make the column sortable.\n     */\n    @Prop() sort: boolean = false;\n    /**\n     * Customizable sort function to change the comparison of values.\n     */\n    @Prop() sortFn: WcsSortFn;\n    /**\n     * Customizable formatter function to render the cell differently.\n     */\n    @Prop() formatter: WcsCellFormatter;\n    /**\n     * Defines if the column sort is ascending or descending.  \n     * `none` = the column is not sorted.\n     */\n    @Prop({mutable: true}) sortOrder: WcsSortOrder = 'none';\n    /**\n     * Set the column `<th>` element width.\n     */\n    @Prop() width: string;\n    /**\n     * Set to true if using a `wcs-custom-cell` linked to it.\n     */\n    @Prop() customCells: boolean = false;\n    /**\n     * Flag to hide the column.\n     */\n    @Prop() hidden: boolean = false;\n    /**\n     * Event emitted when the sort of the column is changed.\n     */\n    @Event() wcsSortChange!: EventEmitter<WcsGridColumnSortChangeEventDetails>;\n    /**\n     * Event emitted if the column is dynamically switching visibility.\n     */\n    @Event() wcsHiddenChange!: EventEmitter<boolean>;\n\n    @Watch('hidden')\n    parseMyObjectProp(newValue: boolean) {\n        this.wcsHiddenChange.emit(newValue);\n    }\n\n    @Watch('sortOrder')\n    sortOrderChange(_: WcsSortOrder) {\n        this.emitSortConfig();\n    }\n\n    emitSortConfig() {\n        if (!this.sort) return;\n        this.wcsSortChange.emit({\n            column: this.el,\n            order: this.sortOrder,\n            sortFn: this.sortFn\n        });\n    }\n\n    render(): any {\n        return (<Host onClick={this.onSortClick.bind(this)} slot=\"grid-column\">\n            <th style={{width: this.width}} class={this.sort ? 'pointer' : ''}>\n                <div class=\"grid-column-th-content\">\n                    <span>{this.name}</span>\n                    {\n                        this.sort ? <GridSortArrow state={this.sortOrder}/> : ''\n                    }\n                </div>\n            </th>\n        </Host>)\n    }\n\n    private onSortClick() {\n        // @Watch on sortOrder property will trigger wcsSortChange event\n        this.sortOrder = this.sortOrder === 'none' || this.sortOrder === 'desc' ? 'asc' : 'desc';\n    }\n}\n"],"mappings":"gEAOO,MAAMA,EAAyD,EAAGC,WACrEC,EAAA,OAAKC,MAAO,CAAEC,WAAY,QAAUC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAClGN,EAAA,SAAOO,KAAK,YAAY,ijBAoBxBP,EAAA,KAAGQ,KAAK,OAAOC,MAAM,mBACjBT,EAAA,QAAMS,OAAQV,IAAU,MAAQ,SAAW,IAAM,SAAUW,EAAE,mDAC7DV,EAAA,QAAMU,EAAE,gBAAgBF,KAAK,UAEjCR,EAAA,KAAGQ,KAAK,OAAOC,MAAM,oBACjBT,EAAA,QAAMS,OAAQV,IAAU,OAAS,SAAW,IAAM,SAAUW,EAAE,mDAC9DV,EAAA,QAAMU,EAAE,gBAAgBF,KAAK,WCnCzC,MAAMG,EAAgB,iqB,MCcTC,EAAU,M,yKAaK,M,8DAayB,O,sCAQlB,M,YAIL,K,CAW1BC,kBAAkBC,GACdC,KAAKC,gBAAgBC,KAAKH,E,CAI9BI,gBAAgBC,GACZJ,KAAKK,gB,CAGTA,iBACI,IAAKL,KAAKM,KAAM,OAChBN,KAAKO,cAAcL,KAAK,CACpBM,OAAQR,KAAKS,GACbC,MAAOV,KAAKW,UACZC,OAAQZ,KAAKY,Q,CAIrBC,SACI,OAAQ5B,EAAC6B,EAAI,CAACC,QAASf,KAAKgB,YAAYC,KAAKjB,MAAOkB,KAAK,eACrDjC,EAAA,MAAIC,MAAO,CAACG,MAAOW,KAAKX,OAAQK,MAAOM,KAAKM,KAAO,UAAY,IAC3DrB,EAAA,OAAKS,MAAM,0BACPT,EAAA,YAAOe,KAAKmB,MAERnB,KAAKM,KAAOrB,EAACF,EAAa,CAACC,MAAOgB,KAAKW,YAAe,K,CAOlEK,cAEJhB,KAAKW,UAAYX,KAAKW,YAAc,QAAUX,KAAKW,YAAc,OAAS,MAAQ,M"}