{"version":3,"names":["WcsCounterSizeValues","isWcsCounterSize","size","includes","counterCss","ANIMATION_DURATION","Counter","this","animateRunning","getCounterContainer","Array","from","el","shadowRoot","children","find","tagName","handleDecrement","min","undefined","value","step","notifyChange","animate","handleIncrement","max","direction","counterContainer","outliers","filter","span","classList","contains","add","forEach","remove","setTimeout","displayedValue","componentWillLoad","handleValueChange","console","error","join","valueChange","newVal","oldVal","setMinimumIfValueIsUndefinedOrNull","ensureValueIsNotOutOfMinMax","updateDisplayValueIfNoAnimationRunning","_a","onKeyDown","_event","isKeyup","preventDefault","isKeydown","isHomeKey","isEndKey","wcsChange","emit","render","h","Host","class","shape","tabindex","onClick","onBlur","event","wcsBlur","disabled","icon","id","role","label"],"sources":["./src/components/counter/counter-interface.ts","./src/components/counter/counter.scss?tag=wcs-counter&encapsulation=shadow","./src/components/counter/counter.tsx"],"sourcesContent":["import { WcsSize } from \"../../shared-types\";\n\nexport interface CounterChangeEventDetail {\n    value: number;\n}\n\nexport const WcsCounterSizeValues = ['m', 'l'] as const; // as const keyword is used to infer and preserve the exact literal values of an array or object.\n\nexport type WcsCounterSize = Extract<WcsSize, typeof WcsCounterSizeValues[number]>;\n\nexport function isWcsCounterSize(size: string): size is WcsCounterSize {\n    // @ts-ignore : ignore size type, as it is checked with WcsInputSizeValues\n    return WcsCounterSizeValues.includes(size);\n}\n","@import '../../style/focus-outline.scss';\n\n@keyframes spin-animation-up {\n    0% {\n        transform: translateY(0);\n        transform-origin: center;\n        opacity: 1;\n    }\n    50% {\n        opacity: 0.5;\n    }\n    100% {\n        transform: translateY(30px);\n        transform-origin: center;\n        opacity: 1;\n    }\n}\n\n@keyframes spin-animation-down {\n    0% {\n        transform: translateY(0);\n        transform-origin: center;\n        opacity: 1;\n    }\n    50% {\n        opacity: 0.5;\n    }\n    100% {\n        transform: translateY(-30px);\n        transform-origin: center;\n        opacity: 1;\n    }\n}\n\n:host {\n    box-sizing: border-box;\n    height: var(--wcs-counter-host-height);\n    --wcs-input-icon-color: var(--wcs-text-medium);\n    --wcs-internal-input-border-radius: calc(var(--wcs-border-radius) * 10); // 80 px\n    --wcs-internal-input-border-width: 2px;\n    font-family: var(--wcs-font-sans-serif);\n    font-size: var(--wcs-counter-font-size);\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    padding: var(--wcs-counter-host-padding);\n    width: fit-content;\n    overflow: hidden;\n    border-radius: var(--wcs-internal-input-border-radius);\n    background-color: var(--wcs-light);\n    border: var(--wcs-internal-input-border-width) solid var(--wcs-light);\n    background-clip: padding-box;\n\n    .counter-container {\n        height: var(--wcs-counter-host-height);\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        margin: 0 calc(2* var(--wcs-base-margin));\n        position: relative;\n    }\n\n    .outliers {\n        position: absolute;\n    }\n\n    #outlier-down {\n        top: calc((var(--wcs-counter-host-height) / 2) * -1);\n    }\n\n    #outlier-up {\n        bottom: calc((var(--wcs-counter-host-height) / 2) * -1);\n    }\n\n    span.current-value {\n        &:focus-visible {\n            @include focus-outline;\n        }\n    }\n\n    .animate-up {\n        animation: spin-animation-up 0.175s ease-in-out;\n    }\n\n    .animate-down {\n        animation: spin-animation-down 0.175s ease-in-out;\n    }\n\n    .hidden {\n        opacity: 0;\n    }\n}\n\n:host([size='m']) { // Default\n    --wcs-counter-host-padding: 4px;\n    --wcs-counter-host-height: var(--wcs-size-m);\n    --wcs-counter-font-size: 1rem;\n}\n\n:host([size='l']) {\n    --wcs-counter-host-padding: 8px;\n    --wcs-counter-host-height: var(--wcs-size-l);\n    --wcs-counter-font-size: 1.0625rem;\n}\n","import {\n    Component,\n    ComponentInterface,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Prop,\n    State,\n    Watch\n} from '@stencil/core';\nimport { isEndKey, isHomeKey, isKeydown, isKeyup } from '../../utils/helpers';\nimport { CounterChangeEventDetail, isWcsCounterSize, WcsCounterSize, WcsCounterSizeValues } from './counter-interface';\n\nconst ANIMATION_DURATION = 0.175 // seconds\n\n/**\n * Counter component, meant to be used for small range of values (e.g : 0 - 5).<br>\n * For larger or specific ranges, please use [wcs-input (type number)](.?path=/docs/components-input--documentation)\n */\n@Component({\n    tag: 'wcs-counter',\n    styleUrl: 'counter.scss',\n    shadow: true,\n})\nexport class Counter implements ComponentInterface {\n    @Element() private el!: HTMLElement;\n\n    /**\n     * Specify the size (height) of the counter.\n     */\n    @Prop({reflect: true}) size: WcsCounterSize = 'm';\n\n    /**\n     * The label of the counter.<br/>\n     * e.g. Number of passengers, train carriages, railroad tracks...\n     */\n    @Prop({mutable: false}) label!: string;\n\n    /**\n     * The minimum value of the counter.\n     * If the value of the min attribute isn't set, then the element has no minimum value.\n     */\n    @Prop({mutable: true}) min?: number;\n\n    /**\n     * The maximum value of the counter.\n     * If the value of the max attribute isn't set, then the element has no maximum value.\n     */\n    @Prop({mutable: true}) max?: number;\n\n    /**\n     * Defines by how much the counter will be incremented or decremented.\n     */\n    @Prop({mutable: true}) step: number = 1;\n\n    /**\n     * Emitted when the value of the counter has changed.\n     */\n    @Event() wcsChange!: EventEmitter<CounterChangeEventDetail>;\n\n    /**\n     * The current value of the counter.\n     */\n    @Prop({mutable: true}) value!: number;\n\n    /**\n     * Only for animation and display purpose\n     */\n    @State() private displayedValue: number;\n\n    private animateRunning = false;\n\n    /**\n     * Emitted when the counter loses focus.\n     */\n    @Event() wcsBlur!: EventEmitter<FocusEvent>;\n\n    componentWillLoad() {\n        this.handleValueChange();\n\n        if (!isWcsCounterSize(this.size)) {\n            console.error(`Invalid size value for wcs-counter : \"${this.size}\". Must be one of \"${WcsCounterSizeValues.join(', ')}\"`);\n            this.size = \"m\"; // Default fallback value\n        }\n    }\n\n    /**\n     * Current value change => handle event and interval\n     */\n    @Watch('value')\n    valueChange(newVal: any, oldVal: any) {\n        if(oldVal === newVal) return;\n\n        this.handleValueChange();\n    }\n\n    private handleValueChange() {\n        this.setMinimumIfValueIsUndefinedOrNull();\n        this.ensureValueIsNotOutOfMinMax();\n        this.updateDisplayValueIfNoAnimationRunning();\n    }\n\n    private updateDisplayValueIfNoAnimationRunning() {\n        if (!this.animateRunning) {\n            this.displayedValue = this.value;\n        }\n    }\n\n    private ensureValueIsNotOutOfMinMax() {\n        if (this.max !== undefined && this.value > this.max) {\n            this.value = this.max;\n        } else if (this.min !== undefined && this.value < this.min) {\n            this.value = this.min;\n        }\n    }\n\n    private setMinimumIfValueIsUndefinedOrNull() {\n        if (this.value === undefined || this.value === null) {\n            this.value = this.min ?? 0;\n        }\n    }\n\n    onKeyDown(_event: KeyboardEvent) {\n        if (isKeyup(_event)) {\n            _event.preventDefault();\n            this.handleIncrement()\n        }\n        if (isKeydown(_event)) {\n            _event.preventDefault();\n            this.handleDecrement()\n        }\n        if (isHomeKey(_event)) {\n            _event.preventDefault();\n            if (this.min != null) {\n                this.value = this.min;\n                this.displayedValue = this.value;\n                this.notifyChange();\n            }\n        }\n        if (isEndKey(_event)) {\n            _event.preventDefault();\n            if (this.max != null) {\n                this.value = this.max;\n                this.displayedValue = this.value;\n                this.notifyChange();\n            }\n        }\n    }\n\n    private notifyChange() {\n        this.wcsChange.emit({\n            value: this.value\n        });\n    }\n    \n    private getCounterContainer = (): HTMLDivElement => {\n        return Array.from(this.el.shadowRoot.children)\n            .find(el => el.tagName === 'DIV') as HTMLDivElement;\n    }\n\n    private handleDecrement = () => {\n        if (this.min === undefined || this.value > this.min) {\n            // we set animateRunning here to prevent the watch method on value prop from affecting the displayed value\n            // before the animation runs.\n            this.animateRunning = true; \n            this.value -= this.step;\n            this.notifyChange();\n            this.animate('up');\n        }\n    };\n\n    private handleIncrement = () => {\n        if (this.max === undefined || this.value < this.max) {\n            // we set animateRunning here to prevent the watch method on value prop from affecting the displayed value\n            // before the animation runs.\n            this.animateRunning = true; \n            this.value += this.step;\n            this.notifyChange();\n            this.animate('down');\n        }\n    };\n\n    private animate = (direction: 'up' | 'down'): void => {\n        // In case someone call animate function, we want ensured that animateRunning is set to true to prevent other \n        // method to mutate the displayedValue.\n        this.animateRunning = true;  \n\n        const counterContainer = this.getCounterContainer();\n        const outliers = Array.from(counterContainer.children)\n            .filter((span: HTMLSpanElement) => span.classList.contains('outliers'));\n\n        counterContainer.classList.add('animate-' + direction);\n        outliers.forEach((span: HTMLSpanElement) => {\n            span.classList.remove('hidden')\n        });\n        setTimeout(() => {\n            counterContainer.classList.remove('animate-' + direction);\n            outliers.forEach((span: HTMLSpanElement) => {\n                span.classList.add('hidden')\n            });\n            this.displayedValue = this.value;\n\n            this.animateRunning = false;\n        }, 1000 * ANIMATION_DURATION - 20);\n    }\n\n    render() {\n        return (\n            <Host>\n                <wcs-button class=\"wcs-primary\"\n                            shape=\"round\"\n                            size=\"s\"\n                            tabindex={-1}\n                            onClick={() => this.handleDecrement()}\n                            onBlur={(event) => this.wcsBlur.emit(event)}\n                            disabled={this.value === this.min}>\n                    <wcs-mat-icon icon=\"remove\" size=\"s\"></wcs-mat-icon>\n                </wcs-button>\n                <div class=\"counter-container\">\n                    <span id=\"outlier-down\" class=\"outliers hidden\"\n                          aria-hidden=\"true\">{this.displayedValue - this.step}</span>\n                    <span tabindex=\"0\"\n                          role=\"spinbutton\"\n                          class=\"current-value\"\n                          onBlur={(event) => this.wcsBlur.emit(event)}\n                          onKeyDown={(event) => this.onKeyDown(event)}\n                          aria-valuenow={this.value}\n                          aria-valuetext={this.value}\n                          aria-valuemin={this.min}\n                          aria-valuemax={this.max}\n                          aria-label={this.label}>{this.displayedValue}</span>\n                    <span id=\"outlier-up\" class=\"outliers hidden\"\n                          aria-hidden=\"true\">{this.displayedValue + this.step}</span>\n                </div>\n                <wcs-button class=\"wcs-primary\"\n                            shape=\"round\"\n                            size=\"s\"\n                            tabindex={-1}\n                            onClick={() => this.handleIncrement()}\n                            onBlur={(event) => this.wcsBlur.emit(event)}\n                            disabled={this.value === this.max}>\n                    <wcs-mat-icon icon=\"add\" size=\"s\"></wcs-mat-icon>\n                </wcs-button>\n            </Host>\n        );\n    }\n}\n"],"mappings":"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"}