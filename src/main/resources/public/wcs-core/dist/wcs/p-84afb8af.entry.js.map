{"version":3,"names":["comNavCss","WCS_COM_NAV_SUBMENU_TAG_NAME","ComNav","this","hasAlreadyRegisteredClickHandlerOnSlottedLink","mobileMenuIconClick","mobileMenuOpen","disconnectedCallback","_a","resizeObserver","disconnect","componentWillLoad","ResizeObserver","entry","cr","contentRect","paddingRight","right","width","paddingLeft","left","currentActiveSizing","observe","document","body","slottedNavigableItems","el","querySelectorAll","registerCloseHandlerForFocusOutEventOn","componentDidRender","registerHandlerToCloseMobileMenuOnClickOnSlottedLinkTag","mainSlot","shadowRoot","querySelector","assignedElements","filter","e","tagName","forEach","a","addEventListener","_","onClickOnFinalAction","onClickOnFinalActionCat","render","h","Host","class","appName","name","id","tabindex","onClick","onKeyDown","evt","mobileMenuIconOnKeyDown","isSpaceKey","isEnterKey","exitMobileMenuOnKeyDown","isEscapeKey"],"sources":["./src/components/com-nav/com-nav.scss?tag=wcs-com-nav&encapsulation=shadow","./src/components/com-nav/com-nav.tsx"],"sourcesContent":["@import '../../style/focus-outline.scss';\n\n:host {\n    display: block;\n    position: relative;\n    height: 75px;\n    border-bottom: solid 1px var(--wcs-text-light);\n\n    .container {\n        padding: 0 var(--wcs-padding);\n        height: 100%;\n        display: flex;\n        align-items: center;\n        flex-direction: row;\n        justify-content: space-between;\n    }\n\n    .container-left {\n        display: flex;\n        height: 100%;\n        align-items: center;\n        flex-direction: row;\n    }\n\n    .container-right {\n        display: flex;\n        align-items: center;\n    }\n\n    .app-name {\n        font-weight: 400;\n        font-size: 1.5rem;\n        line-height: 1.25;\n        color: var(--wcs-gray);\n    }\n\n    .menu-bar {\n        display: none;\n    }\n\n    ::slotted(a) {\n        padding-top: calc(1.5 * var(--wcs-base-margin));\n        padding-bottom: calc(1.5 * var(--wcs-base-margin));\n        padding-left: calc(3 * var(--wcs-base-margin));\n        display: flex;\n        align-items: center;\n        height: 100%;\n        font-size: 16px;\n        cursor: pointer;\n        font-weight: 500;\n        color: var(--wcs-gray);\n        text-decoration: none;\n    }\n\n    ::slotted(a):after {\n        font-family: icons;\n        padding-left: var(--wcs-base-margin);\n        font-size: 0.6rem;\n        content: \"\\f107\";\n        line-height: 1;\n        box-sizing: border-box;\n    }\n\n    ::slotted(a:focus-visible) {\n        @include focus-outline(var(--wcs-primary), 2px, 0.1rem);\n    }\n\n    @supports not selector(::slotted(a:focus-visible)) {\n        ::slotted(a:focus-within) {\n            @include focus-outline(var(--wcs-primary), 2px, 0.1rem);\n        }\n    }\n\n    #mobile-menu-icon {\n        height: 24px;\n        padding-left: calc(2 * var(--wcs-base-margin));\n        margin-left: var(--wcs-base-margin);\n        border-left: solid 1px var(--wcs-text-light);\n    }\n\n    #mobile-menu-icon:focus {\n        outline: none;\n    }\n\n    #mobile-menu-icon:focus-visible::after {\n        @include focus-outline();\n    }\n\n    @supports not selector(#mobile-menu-icon:focus-visible::after) {\n        #mobile-menu-icon:focus::after {\n            @include focus-outline();\n        }\n    }\n\n    #mobile-menu-icon:after {\n        font-family: icons;\n        font-size: 24px;\n        cursor: pointer;\n        content: \"\\f198\";\n        line-height: 1;\n        box-sizing: border-box;\n    }\n        #mobile-menu-icon[data-mobile-open]:after {\n            content: \"\\f129\";\n        }\n    .mobile-overlay {\n        display: none;\n    }\n\n    .mobile-overlay[data-mobile-open] {\n        padding-top: calc(2 * var(--wcs-base-margin));\n        padding-bottom: calc(2 * var(--wcs-base-margin));\n        position: relative;\n        top: 0;\n        left: 0;\n        right: 0;\n        display: block;\n        z-index: 9999;\n        background-color: var(--wcs-white);\n    }\n}\n\n@media screen and (min-width: 576px) {\n    :host {\n        .container {\n            margin: 0 auto;\n            max-width: var(--wcs-com-content-max-width);\n        }\n\n        .menu-bar {\n            display: flex;\n            align-items: center;\n            height: 100%;\n            margin-left: 50px;\n\n            ::slotted(*:not(:first-child)) {\n                margin-left: 40px;\n            }\n\n            ::slotted(a:focus-visible) {\n                @include focus-outline(var(--wcs-primary), 2px, 0.1rem);\n            }\n\n            @supports not selector(::slotted(a:focus-visible)) {\n                ::slotted(a:focus-within) {\n                    @include focus-outline(var(--wcs-primary), 2px, 0.1rem);\n                }\n            }\n        }\n\n        #mobile-menu-icon {\n            display: none;\n        }\n\n        .mobile-overlay {\n            display: none !important;\n        }\n\n        ::slotted(a) {\n            padding-top: unset;\n            padding-bottom: unset;\n            padding-left: unset;\n        }\n    }\n}\n","import {Component, Host, h, Prop, Element, ComponentInterface, State, Listen} from '@stencil/core';\nimport {registerCloseHandlerForFocusOutEventOn} from \"./com-nav-utils\";\nimport { isEnterKey, isEscapeKey, isSpaceKey } from \"../../utils/helpers\";\n\nconst WCS_COM_NAV_SUBMENU_TAG_NAME = 'WCS-COM-NAV-SUBMENU';\n\n@Component({\n    tag: 'wcs-com-nav',\n    styleUrl: 'com-nav.scss',\n    shadow: true,\n})\nexport class ComNav implements ComponentInterface {\n    @Element() private el!: HTMLWcsComNavElement;\n\n    /** Name of the application to be displayed in the menu bar */\n    @Prop() appName: string;\n\n    @State() private mobileMenuOpen: boolean = false;\n    @State() private currentActiveSizing: 'desktop' | 'mobile';\n    private resizeObserver: ResizeObserver;\n    private hasAlreadyRegisteredClickHandlerOnSlottedLink: boolean = false;\n\n    private mobileMenuIconClick() {\n        this.mobileMenuOpen = !this.mobileMenuOpen;\n    }\n\n    disconnectedCallback() {\n        this.resizeObserver?.disconnect();\n    }\n\n    componentWillLoad(): Promise<void> | void {\n        this.resizeObserver = new ResizeObserver(entry => {\n            const cr = entry[0].contentRect;\n            const paddingRight = cr.right - cr.width;\n            const paddingLeft = cr.left;\n            if (cr.width < 576 - (paddingLeft + paddingRight)) {\n                this.currentActiveSizing = 'mobile';\n            } else {\n                this.currentActiveSizing = 'desktop';\n            }\n        });\n        this.resizeObserver.observe(document.body);\n\n        const slottedNavigableItems = this.el.querySelectorAll(':scope > wcs-com-nav-submenu:not([slot]), :scope > a:not([slot])');\n        registerCloseHandlerForFocusOutEventOn<HTMLWcsComNavSubmenuElement>(slottedNavigableItems, WCS_COM_NAV_SUBMENU_TAG_NAME);\n    }\n\n    componentDidRender() {\n        this.registerHandlerToCloseMobileMenuOnClickOnSlottedLinkTag();\n    }\n\n\n    private registerHandlerToCloseMobileMenuOnClickOnSlottedLinkTag() {\n        if (this.hasAlreadyRegisteredClickHandlerOnSlottedLink) return;\n\n        const mainSlot = this.el.shadowRoot.querySelector('slot:not([name])') as HTMLSlotElement;\n        if (mainSlot) {\n            this.hasAlreadyRegisteredClickHandlerOnSlottedLink = true;\n            // If the user click on a `a` tag, we close the mobile menu overlay.\n            mainSlot.assignedElements().filter(e => e.tagName === 'A').forEach(a => {\n                    a.addEventListener('click', _ => {\n                        this.mobileMenuOpen = false;\n                    })\n                }\n            );\n\n        }\n    }\n\n    //region Handlers for mobile menu overlay visibility\n    //\n    // In mobile mode, we have only one global drawer to display the menu, that why we have to listen the clicks events\n    // in the root component (this component). In desktop mode, all submenus and categories manage their drawer its\n    // opening state.\n    //\n    // We listen to the click events fired by the sebmenu component and we close the mobile menu.\n    // In desktop mode, the submenu itself manages the closing of the menu.\n    @Listen('wcsClickOnFinalAction')\n    onClickOnFinalAction() {\n        this.mobileMenuOpen = false;\n    }\n\n    // We also listen click events on the category menu items, to close the mobile menu.\n    // In desktop mode, the category itself manages the closing of the menu.\n    @Listen('wcsCategoryItemClicked')\n    onClickOnFinalActionCat() {\n        this.mobileMenuOpen = false;\n    }\n\n    //endregion\n\n    render() {\n        return (\n            <Host>\n                <div class=\"container\">\n                    <div class=\"container-left\">\n                        <div class=\"app-name\">{this.appName}\n                            <slot name=\"app-name\"/>\n                        </div>\n                        <div class=\"menu-bar\">\n                            {this.currentActiveSizing === 'desktop' ? <slot/> : null}\n                        </div>\n                    </div>\n                    <div class=\"container-right\">\n                        <slot name=\"actions\"/>\n                        <span id=\"mobile-menu-icon\" tabindex={0} data-mobile-open={this.mobileMenuOpen}\n                              onClick={() => this.mobileMenuIconClick()} onKeyDown={evt => this.mobileMenuIconOnKeyDown(evt)}></span>\n                    </div>\n                </div>\n                <div class=\"mobile-overlay\" data-mobile-open={this.mobileMenuOpen}>\n                    {this.currentActiveSizing === 'mobile' ? <slot/> : null}\n                </div>\n            </Host>\n        );\n    }\n\n    /**\n     * Handle the keydown event on the mobile menu icon. Open the menu if the user press space or enter.\n     * @param evt The keydown event.\n     * @private\n     */\n    private mobileMenuIconOnKeyDown(evt: KeyboardEvent) {\n        if (isSpaceKey(evt) || isEnterKey(evt)) {\n            this.mobileMenuIconClick();\n        }\n    }\n\n    /**\n     * Close the mobile menu if the user press escape.\n     * @param evt keydown event on window target.\n     */\n    @Listen('keydown', {target: 'window'})\n    exitMobileMenuOnKeyDown(evt: KeyboardEvent) {\n        if(isEscapeKey(evt)) {\n            this.mobileMenuOpen = false;\n        }\n    }\n}\n"],"mappings":"0IAAA,MAAMA,EAAY,w0FCIlB,MAAMC,EAA+B,sB,MAOxBC,EAAM,M,yBASPC,KAAAC,8CAAyD,M,2CAHtB,M,mCAKnCC,sBACJF,KAAKG,gBAAkBH,KAAKG,c,CAGhCC,uB,OACIC,EAAAL,KAAKM,kBAAc,MAAAD,SAAA,SAAAA,EAAEE,Y,CAGzBC,oBACIR,KAAKM,eAAiB,IAAIG,gBAAeC,IACrC,MAAMC,EAAKD,EAAM,GAAGE,YACpB,MAAMC,EAAeF,EAAGG,MAAQH,EAAGI,MACnC,MAAMC,EAAcL,EAAGM,KACvB,GAAIN,EAAGI,MAAQ,KAAOC,EAAcH,GAAe,CAC/Cb,KAAKkB,oBAAsB,Q,KACxB,CACHlB,KAAKkB,oBAAsB,S,KAGnClB,KAAKM,eAAea,QAAQC,SAASC,MAErC,MAAMC,EAAwBtB,KAAKuB,GAAGC,iBAAiB,oEACvDC,EAAoEH,EAAuBxB,E,CAG/F4B,qBACI1B,KAAK2B,yD,CAIDA,0DACJ,GAAI3B,KAAKC,8CAA+C,OAExD,MAAM2B,EAAW5B,KAAKuB,GAAGM,WAAWC,cAAc,oBAClD,GAAIF,EAAU,CACV5B,KAAKC,8CAAgD,KAErD2B,EAASG,mBAAmBC,QAAOC,GAAKA,EAAEC,UAAY,MAAKC,SAAQC,IAC3DA,EAAEC,iBAAiB,SAASC,IACxBtC,KAAKG,eAAiB,KAAK,GAC7B,G,EAgBlBoC,uBACIvC,KAAKG,eAAiB,K,CAM1BqC,0BACIxC,KAAKG,eAAiB,K,CAK1BsC,SACI,OACIC,EAACC,EAAI,KACDD,EAAA,OAAKE,MAAM,aACPF,EAAA,OAAKE,MAAM,kBACPF,EAAA,OAAKE,MAAM,YAAY5C,KAAK6C,QACxBH,EAAA,QAAMI,KAAK,cAEfJ,EAAA,OAAKE,MAAM,YACN5C,KAAKkB,sBAAwB,UAAYwB,EAAA,aAAU,OAG5DA,EAAA,OAAKE,MAAM,mBACPF,EAAA,QAAMI,KAAK,YACXJ,EAAA,QAAMK,GAAG,mBAAmBC,SAAU,EAAC,mBAAoBhD,KAAKG,eAC1D8C,QAAS,IAAMjD,KAAKE,sBAAuBgD,UAAWC,GAAOnD,KAAKoD,wBAAwBD,OAGxGT,EAAA,OAAKE,MAAM,iBAAgB,mBAAmB5C,KAAKG,gBAC9CH,KAAKkB,sBAAwB,SAAWwB,EAAA,aAAU,M,CAW3DU,wBAAwBD,GAC5B,GAAIE,EAAWF,IAAQG,EAAWH,GAAM,CACpCnD,KAAKE,qB,EASbqD,wBAAwBJ,GACpB,GAAGK,EAAYL,GAAM,CACjBnD,KAAKG,eAAiB,K"}