{"version":3,"names":["switchCss","Switch","this","switchId","switchIds","toggleChange","_event","checked","wcsChange","emit","render","h","Host","htmlFor","name","class","disabled","onChange","evt","type","id"],"sources":["./src/components/switch/switch.scss?tag=wcs-switch&encapsulation=shadow","./src/components/switch/switch.tsx"],"sourcesContent":["@import '../../style/focus-outline.scss';\n\n:host {\n    --wcs-switch-background-color-initial: var(--wcs-text-light);\n    --wcs-switch-background-color-final: var(--wcs-primary);\n\n    --wcs-switch-bullet-color-initial: var(--wcs-switch-background-color-final);\n    --wcs-switch-bullet-color-final: var(--wcs-switch-background-color-initial);\n\n    --wcs-switch-text-color: var(--wcs-text-medium);\n\n    display: flex;\n}\n\n:host([disabled]) {\n    --wcs-switch-text-color: var(--wcs-text-disabled);\n\n    .wcs-container {\n        cursor: not-allowed;\n    }\n}\n\n/* Customize the label (the wcs-container) */\n.wcs-container {\n    position: relative;\n    display: flex;\n    margin-bottom: 0;\n}\n\n:host {\n    input:focus-visible + .wcs-checkmark {\n        @include focus-outline($border-radius: 0.75rem);\n    }\n}\n\n/* Let the user choose the alignment of the checkbox with the label text */\n:host([label-alignment=\"top\"]) {\n    .wcs-container {\n        align-items: start;\n    }\n}\n\n:host([label-alignment=\"center\"]) {\n    .wcs-container {\n        align-items: center;\n    }\n}\n\n:host([label-alignment=\"bottom\"]) {\n    .wcs-container {\n        align-items: flex-end;\n    }\n}\n\n/* Hide the browser's default switch */\n.wcs-container input {\n    position: absolute;\n    opacity: 0;\n    height: 0;\n    width: 0;\n}\n\n.text {\n    color: var(--wcs-switch-text-color);\n    margin-left: 6px;\n    font-weight: 500;\n    line-height: 1.375;\n}\n\n.wcs-container:not([aria-disabled]) input:checked ~ .text {\n    --wcs-switch-text-color: var(--wcs-primary);\n}\n\n.wcs-checkmark::before {\n    position: absolute;\n    transition: all .15s ease-out;\n}\n\n.wcs-checkmark::before {\n    bottom: 0.3125rem;\n    left: 0.3125rem;\n    width: 0.875rem;\n    height: 0.875rem;\n    content: \"\";\n    border-radius: 50%;\n    background-color: var(--wcs-switch-bullet-color-initial);\n}\n\n:host([disabled]:not([checked])) {\n    .wcs-checkmark::before {\n        background-color: var(--wcs-text-disabled);\n    }\n\n    .wcs-checkmark {\n        background-color: var(--wcs-light);\n    }\n}\n\n:host([disabled][checked]) {\n    .wcs-checkmark::before {\n        background-color: var(--wcs-white);\n    }\n\n    .wcs-checkmark {\n        background-color: var(--wcs-text-disabled);\n    }\n}\n\n.wcs-checkmark {\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 3rem;\n    height: 1.5rem;\n    border-radius: 0.75rem;\n    background-color: var(--wcs-switch-background-color-initial);\n}\n\n.wcs-container:not([aria-disabled]) {\n    cursor: pointer;\n}\n\n.wcs-container:hover:not([aria-disabled]) {\n    --wcs-switch-text-color: var(--wcs-primary);\n}\n\n/* When the switch is checked, change the bullet to grey */\ninput:not([disabled]):checked + .wcs-checkmark::before,\n.wcs-container:hover input:not([disabled]) + .wcs-checkmark::before,\n.wcs-container:focus input:not([disabled]) + .wcs-checkmark::before {\n    background-color: var(--wcs-switch-bullet-color-final);\n}\n\n/* Switch transition */\ninput:checked + .wcs-checkmark::before {\n    transform: translateX(24px);\n}\n\n/* When the switch is checked, change background to blue */\ninput:not([disabled]):checked + .wcs-checkmark,\n.wcs-container:hover input:not([disabled]) + .wcs-checkmark,\n.wcs-container:focus input:not([disabled]) + .wcs-checkmark {\n    background-color: var(--wcs-switch-background-color-final);\n}\n","import { Component, ComponentInterface, Event, EventEmitter, h, Host, Prop } from '@stencil/core';\nimport { SwitchChangeEventDetail, SwitchLabelAlignment } from './switch-interface';\n\n@Component({\n    tag: 'wcs-switch',\n    styleUrl: 'switch.scss',\n    shadow: true\n})\nexport class Switch implements ComponentInterface {\n    private switchId = `wcs-switch-${switchIds++}`;\n\n    @Prop() name = this.switchId;\n\n    /**\n     * If `true`, the switch is selected.\n     */\n    @Prop({reflect: true}) checked = false;\n\n    /**\n     * Emitted when the checked property has changed.\n     */\n    @Event() wcsChange!: EventEmitter<SwitchChangeEventDetail>;\n\n    /**\n     * Specifie the alignment of the switch with the label content\n     */\n    @Prop({reflect: true}) labelAlignment: SwitchLabelAlignment = 'center';\n\n    /**\n     * Specify wether the switch is disabled or not.\n     */\n    @Prop() disabled: boolean = false;\n\n    toggleChange(_event: Event) {\n        this.checked = !this.checked;\n        this.wcsChange.emit({\n            checked: this.checked\n        });\n    }\n\n    render() {\n        return (\n            <Host>\n                <label htmlFor={this.name} class=\"wcs-container\" aria-disabled={this.disabled}>\n                    <input onChange={(evt) => this.toggleChange(evt)}\n                           checked={this.checked}\n                           class=\"wcs-switch\"\n                           type=\"checkbox\"\n                           name={this.name}\n                           disabled={this.disabled}\n                           id={this.name}>\n                    </input>\n                    <span class=\"wcs-checkmark\"></span>\n                    <span class=\"text\">\n                        <slot/>\n                    </span>\n                </label>\n            </Host>\n        );\n    }\n}\n\nlet switchIds = 0;\n"],"mappings":"yDAAA,MAAMA,EAAY,u7E,MCQLC,EAAM,M,8DACPC,KAAAC,SAAW,cAAcC,M,UAElBF,KAAKC,S,aAKa,M,oBAU6B,S,cAKlC,K,CAE5BE,aAAaC,GACTJ,KAAKK,SAAWL,KAAKK,QACrBL,KAAKM,UAAUC,KAAK,CAChBF,QAASL,KAAKK,S,CAItBG,SACI,OACIC,EAACC,EAAI,KACDD,EAAA,SAAOE,QAASX,KAAKY,KAAMC,MAAM,gBAAe,gBAAgBb,KAAKc,UACjEL,EAAA,SAAOM,SAAWC,GAAQhB,KAAKG,aAAaa,GACrCX,QAASL,KAAKK,QACdQ,MAAM,aACNI,KAAK,WACLL,KAAMZ,KAAKY,KACXE,SAAUd,KAAKc,SACfI,GAAIlB,KAAKY,OAEhBH,EAAA,QAAMI,MAAM,kBACZJ,EAAA,QAAMI,MAAM,QACRJ,EAAA,e,GAQxB,IAAIP,EAAY,E"}