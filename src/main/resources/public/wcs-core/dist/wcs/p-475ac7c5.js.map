{"version":3,"names":["GridPaginationArrow","active","order","double","h","style","marginLeft","cursor","xmlns","width","height","viewBox","type","fill","class","d","gridPaginationCss","GridPagination","INDEX_FIRST_PAGE","this","availablePageSizes","lastPage","currentPage","pageCount","emitPaginationChange","nextPage","canGoToNextPage","previousPage","canGoToPreviousPage","firstPage","onChangePagesize","event","pageSize","detail","value","wcsGridPaginationChange","emit","pagination","itemsCount","render","Host","slot","placeholder","onWcsChange","bind","map","onClick"],"sources":["./src/components/grid-pagination/grid-pagination-arrow.tsx","./src/components/grid-pagination/grid-pagination.scss?tag=wcs-grid-pagination&encapsulation=shadow","./src/components/grid-pagination/grid-pagination.tsx"],"sourcesContent":["import { FunctionalComponent, h } from '@stencil/core';\n\ninterface GridPaginationArrowProps {\n    active: boolean;\n    order: 'next' | 'previous';\n    double?: boolean;\n}\n\nexport const GridPaginationArrow: FunctionalComponent<GridPaginationArrowProps> = ({ active, order, double = false }) => (\n    <svg style={{ marginLeft: 'auto', cursor: 'pointer' }} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"20\" viewBox=\"0 0 24 20\">\n        <style type=\"text/css\">{`\n            .arrow-group {\n                transform-origin: 50% 51%;\n                transition: transform 175ms ease-in-out;\n            }\n            .arrow {\n                transition: fill 175ms ease-in-out;\n                fill: var(--wcs-text-light);\n            }\n            .second-arrow {\n                transform: translateY(-8px);\n            }\n            .next {\n                transform: rotate(90deg);\n            }\n            .previous {\n                transform: rotate(-90deg);\n            }\n            .active {\n                fill: var(--wcs-primary);\n            }\n        `}</style>\n        <g fill=\"none\" class={order + ' arrow-group'}>\n            <path class={(active ? 'active' : '') + ' arrow'} d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\" />\n            <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        </g>\n        {\n            double ?\n                <g fill=\"none\" class={order + ' arrow-group'}>\n                    <path class={(active ? 'active' : '') + ' arrow second-arrow'} d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\" />\n                    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n                </g>\n                : ''\n        }\n    </svg>\n);\n",":host {\n    display: block;\n    border-style: solid none none;\n    border-width: 1px;\n    border-color: var(--wcs-text-light);\n}\n\n.container {\n    display: grid;\n    grid-template-columns: auto auto auto;\n    justify-content: space-between;\n    color: var(--wcs-text-medium);\n}\n\n.available-page-sizes {\n    width: auto;\n}\n\n.page-management, .page-size, .items-count {\n    display: flex;\n    align-items: center;\n}\n\n.pagination-arrow {\n    display: flex;\n}\n","import {\n    Component,\n    ComponentInterface,\n    Event, EventEmitter,\n    h,\n    Host,\n    Prop\n} from '@stencil/core';\nimport {\n    WcsGridPaginationChangeEventDetails\n} from '../grid/grid-interface';\nimport { SelectChangeEventDetail } from '../select/select-interface';\nimport { GridPaginationArrow } from './grid-pagination-arrow';\n\n/**\n * The grid pagination is a subcomponent of `wcs-grid`, slotted in `grid-pagination` under the `<table>` element.\n */\n@Component({\n    tag: 'wcs-grid-pagination',\n    styleUrl: 'grid-pagination.scss',\n    shadow: true\n})\nexport class GridPagination implements ComponentInterface {\n    static readonly INDEX_FIRST_PAGE: number = 0;\n    /**\n     * Set the available page sizes in the pagination dropdown on the left.\n     */\n    @Prop() availablePageSizes: number[] = [10, 20, 50];\n    /**\n     * The current page of the pagination. First page starts at index 0.\n     */\n    @Prop() currentPage: number = GridPagination.INDEX_FIRST_PAGE;\n    /**\n     * Maximum number of elements shown per page.  \n     * Default is the first value of `availablePageSizes`.\n     */\n    @Prop() pageSize: number = this.availablePageSizes[0];\n    /**\n     * Total elements in the grid.  \n     * - **Grid in `Server mode`** : You have to set `itemsCount` = your total data length.  \n     * - **Grid not in Server mode** : Do not set it manually : itemsCount is set and updated every pagination refresh.\n     */\n    @Prop() itemsCount: number = 0;\n    /**\n     * Max number of pages.  \n     * - **Grid in `Server mode`** : You have to set `pageCount` = `itemsCount` divided by `pageSize`.  \n     * - **Grid not in Server mode** : Do not set it manually : pageCount is set and updated every pagination refresh.\n     */\n    @Prop() pageCount: number = 1;\n    /**\n     * Event emitted when the pagination changes.\n     */\n    @Event() wcsGridPaginationChange!: EventEmitter<WcsGridPaginationChangeEventDetails>;\n\n    private lastPage(): void {\n        this.currentPage = this.pageCount - 1;\n        this.emitPaginationChange();\n    }\n\n    private nextPage(): void {\n        if (this.canGoToNextPage()) {\n            this.currentPage++;\n            this.emitPaginationChange();\n        }\n    }\n\n    private canGoToNextPage(): boolean {\n        return this.currentPage + 1 < this.pageCount;\n    }\n\n    private previousPage(): void {\n        if (this.canGoToPreviousPage()) {\n            this.currentPage--;\n            this.emitPaginationChange();\n        }\n    }\n\n    private canGoToPreviousPage(): boolean {\n        return this.currentPage > 0;\n    }\n\n    private firstPage(): void {\n        this.currentPage = 0;\n        this.emitPaginationChange();\n    }\n\n    private onChangePagesize(event: CustomEvent<SelectChangeEventDetail>): void {\n        this.pageSize = event.detail.value;\n        if (this.currentPage + 1 > this.pageSize) {\n            this.currentPage = 0;\n        }\n        this.emitPaginationChange();\n    }\n\n    private emitPaginationChange(): void {\n        this.wcsGridPaginationChange.emit({\n            pagination: {\n                currentPage: this.currentPage,\n                pageSize: this.pageSize,\n                itemsCount: this.itemsCount,\n                pageCount: this.pageCount\n            }\n        });\n    }\n\n    render(): any {\n        return (<Host slot=\"grid-pagination\">\n            <div class=\"container\">\n                <div class=\"page-size\">\n                    <wcs-select placeholder=\"Eléments par page\" class=\"available-page-sizes\" value={this.pageSize} onWcsChange={this.onChangePagesize.bind(this)}>\n                        {\n                            this.availablePageSizes.map((pageSize) =>\n                                <wcs-select-option value={pageSize}>{pageSize}</wcs-select-option>\n                            )\n                        }\n                    </wcs-select>\n                    <span>&nbsp;éléments par page</span>\n                </div>\n\n                <div class=\"items-count\">\n                    <span>{this.itemsCount} éléments</span>\n                </div>\n\n                <div class=\"page-management\">\n                    <span class=\"pagination-arrow\" onClick={this.firstPage.bind(this)}>\n                        <GridPaginationArrow active={this.canGoToPreviousPage()} order=\"previous\" double></GridPaginationArrow>\n                    </span>\n                    <span class=\"pagination-arrow\" onClick={this.previousPage.bind(this)}>\n                        <GridPaginationArrow active={this.canGoToPreviousPage()} order=\"previous\"></GridPaginationArrow>\n                    </span>\n\n                    <span>{this.currentPage + 1} / {this.pageCount}</span>\n\n                    <span class=\"pagination-arrow\" onClick={this.nextPage.bind(this)}>\n                        <GridPaginationArrow active={this.canGoToNextPage()} order=\"next\"></GridPaginationArrow>\n                    </span>\n                    <span class=\"pagination-arrow\" onClick={this.lastPage.bind(this)}>\n                        <GridPaginationArrow active={this.canGoToNextPage()} order=\"next\" double></GridPaginationArrow>\n                    </span>\n                </div>\n            </div>\n        </Host>)\n    }\n}\n"],"mappings":"yDAQO,MAAMA,EAAqE,EAAGC,SAAQC,QAAOC,SAAS,SACzGC,EAAA,OAAKC,MAAO,CAAEC,WAAY,OAAQC,OAAQ,WAAaC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aACrHP,EAAA,SAAOQ,KAAK,YAAY,qnBAsBxBR,EAAA,KAAGS,KAAK,OAAOC,MAAOZ,EAAQ,gBAC1BE,EAAA,QAAMU,OAAQb,EAAS,SAAW,IAAM,SAAUc,EAAE,mDACpDX,EAAA,QAAMW,EAAE,gBAAgBF,KAAK,UAG7BV,EACIC,EAAA,KAAGS,KAAK,OAAOC,MAAOZ,EAAQ,gBAC1BE,EAAA,QAAMU,OAAQb,EAAS,SAAW,IAAM,sBAAuBc,EAAE,mDACjEX,EAAA,QAAMW,EAAE,gBAAgBF,KAAK,UAE/B,IC1ClB,MAAMG,EAAoB,yW,MCsBbC,EAAc,M,kHAKgB,CAAC,GAAI,GAAI,I,iBAIlBA,EAAeC,iB,cAKlBC,KAAKC,mBAAmB,G,gBAMtB,E,eAMD,C,CAMpBC,WACJF,KAAKG,YAAcH,KAAKI,UAAY,EACpCJ,KAAKK,sB,CAGDC,WACJ,GAAIN,KAAKO,kBAAmB,CACxBP,KAAKG,cACLH,KAAKK,sB,EAILE,kBACJ,OAAOP,KAAKG,YAAc,EAAIH,KAAKI,S,CAG/BI,eACJ,GAAIR,KAAKS,sBAAuB,CAC5BT,KAAKG,cACLH,KAAKK,sB,EAILI,sBACJ,OAAOT,KAAKG,YAAc,C,CAGtBO,YACJV,KAAKG,YAAc,EACnBH,KAAKK,sB,CAGDM,iBAAiBC,GACrBZ,KAAKa,SAAWD,EAAME,OAAOC,MAC7B,GAAIf,KAAKG,YAAc,EAAIH,KAAKa,SAAU,CACtCb,KAAKG,YAAc,C,CAEvBH,KAAKK,sB,CAGDA,uBACJL,KAAKgB,wBAAwBC,KAAK,CAC9BC,WAAY,CACRf,YAAaH,KAAKG,YAClBU,SAAUb,KAAKa,SACfM,WAAYnB,KAAKmB,WACjBf,UAAWJ,KAAKI,Y,CAK5BgB,SACI,OAAQnC,EAACoC,EAAI,CAACC,KAAK,mBACfrC,EAAA,OAAKU,MAAM,aACPV,EAAA,OAAKU,MAAM,aACPV,EAAA,cAAYsC,YAAY,oBAAoB5B,MAAM,uBAAuBoB,MAAOf,KAAKa,SAAUW,YAAaxB,KAAKW,iBAAiBc,KAAKzB,OAE/HA,KAAKC,mBAAmByB,KAAKb,GACzB5B,EAAA,qBAAmB8B,MAAOF,GAAWA,MAIjD5B,EAAA,mCAGJA,EAAA,OAAKU,MAAM,eACPV,EAAA,YAAOe,KAAKmB,WAAU,cAG1BlC,EAAA,OAAKU,MAAM,mBACPV,EAAA,QAAMU,MAAM,mBAAmBgC,QAAS3B,KAAKU,UAAUe,KAAKzB,OACxDf,EAACJ,EAAmB,CAACC,OAAQkB,KAAKS,sBAAuB1B,MAAM,WAAWC,OAAM,QAEpFC,EAAA,QAAMU,MAAM,mBAAmBgC,QAAS3B,KAAKQ,aAAaiB,KAAKzB,OAC3Df,EAACJ,EAAmB,CAACC,OAAQkB,KAAKS,sBAAuB1B,MAAM,cAGnEE,EAAA,YAAOe,KAAKG,YAAc,EAAC,MAAKH,KAAKI,WAErCnB,EAAA,QAAMU,MAAM,mBAAmBgC,QAAS3B,KAAKM,SAASmB,KAAKzB,OACvDf,EAACJ,EAAmB,CAACC,OAAQkB,KAAKO,kBAAmBxB,MAAM,UAE/DE,EAAA,QAAMU,MAAM,mBAAmBgC,QAAS3B,KAAKE,SAASuB,KAAKzB,OACvDf,EAACJ,EAAmB,CAACC,OAAQkB,KAAKO,kBAAmBxB,MAAM,OAAOC,OAAM,U,GAlH5Ec,EAAAC,iBAA2B,E"}