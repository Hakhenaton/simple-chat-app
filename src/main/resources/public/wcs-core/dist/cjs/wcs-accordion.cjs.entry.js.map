{"file":"wcs-accordion.entry.cjs.js","mappings":";;;;;;MAOa,SAAS;;;IAEV,oBAAe,GAAmC,EAAE,CAAC;0BAMZ,KAAK;qBAOV,KAAK;kCAOQ,KAAK;;EAE9D,iBAAiB;IACb,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,oCAAoC,EAAE,CAAC;IAEnE,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACnC,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAC9B,IAAI,CAAC,4BAA4B,EAAE,CAAC;GACvC;EAGD,oBAAoB,CAAC,KAA2B;IAC5C,IAAI,KAAK,CAAC,MAAM,EAAE;MACd,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KAC/C;GACJ;EAGO,2BAA2B;IAC/B,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,GAAiC;MAC3D,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;KAC5C,CAAC,CAAA;GACL;EAGO,sBAAsB;IAC1B,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,GAAiC;MAC3D,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;KAClC,CAAC,CAAA;GACL;EAEO,4BAA4B;IAChC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,GAAiC;MAC3D,GAAG,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC;KAC5D,CAAC,CAAA;GACL;EAGD,MAAM;IACF,QACIA,QAACC,UAAI,QACDD,qBAAO,CACJ,EACT;GACL;EAEO,oCAAoC;IACxC,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC;OAC9B,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,OAAO,KAAK,qBAAqB,CAAmC,CAAC;GAC7F;;;;EAKO,wBAAwB,CAAC,WAAwB;IACrD,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;GAC/E;;;;;;;;;;;","names":["h","Host"],"sources":["./src/components/accordion/accordion.tsx"],"sourcesContent":["import { Component, Element, h, Host, Listen, Prop, Watch } from '@stencil/core';\n\n@Component({\n    tag: 'wcs-accordion',\n    // styleUrl: 'accordion.scss',\n    shadow: true\n})\nexport class Accordion {\n    @Element() private el!: HTMLWcsAccordionElement;\n    private accordionPanels: HTMLWcsAccordionPanelElement[] = [];\n\n    /**\n     * Specifies whether accordion-panel components should display the open/close text.\n     * if false, it won't show the open/close text in all accordion-panel.\n     */\n    @Prop({reflect: true}) hideActionText: boolean = false;\n\n    /**\n     * Specifies whether accordion-panel components should highlight when open with primary color.\n     * if true, the background color of the accordion-panel will be the primary color.\n     * if false, the background color of the accordion-panel will be wcs-light.\n     */\n    @Prop({reflect: true}) highlight: boolean = false;\n\n    /**\n     * Specifies wether accordion-panel components should group the content with header in one card\n     * if true, there will be only one card with the header and the content\n     * Nothing change when the panel is close\n     */\n    @Prop({reflect: true}) groupContentWithHeader: boolean = false;\n\n    componentWillLoad(): Promise<void> | void {\n        this.accordionPanels = this.getAllAccordionPanelsFromHostElement();\n\n        this.updateHideActiontextOnPanel();\n        this.updateHighlightOnPanel();\n        this.updateGroupContentWithHeader();\n    }\n\n    @Listen('wcsOpenChange')\n    wcsOpenChangeHandler(event: CustomEvent<boolean>) {\n        if (event.detail) {\n            this.closeAllAccordionsExcept(event.target);\n        }\n    }\n\n    @Watch('hideActionText')\n    private updateHideActiontextOnPanel() {\n        this.accordionPanels.forEach((opt: HTMLWcsAccordionPanelElement) => {\n            opt.hideActionText = this.hideActionText;\n        })\n    }\n\n    @Watch('highlight')\n    private updateHighlightOnPanel() {\n        this.accordionPanels.forEach((opt: HTMLWcsAccordionPanelElement) => {\n            opt.highlight = this.highlight;\n        })\n    }\n    @Watch('groupContentWithHeader')\n    private updateGroupContentWithHeader() {\n        this.accordionPanels.forEach((opt: HTMLWcsAccordionPanelElement) => {\n            opt.groupContentWithHeader = this.groupContentWithHeader;\n        })\n    }\n\n\n    render() {\n        return (\n            <Host>\n                <slot/>\n            </Host>\n        );\n    }\n\n    private getAllAccordionPanelsFromHostElement(): HTMLWcsAccordionPanelElement[] {\n        return Array.from(this.el.children)\n            .filter(el => el.tagName === 'WCS-ACCORDION-PANEL') as HTMLWcsAccordionPanelElement[];\n    }\n\n    /**\n     * Close all accordion panels except the one that match the eventTarget reference\n     */\n    private closeAllAccordionsExcept(eventTarget: EventTarget): void {\n        this.accordionPanels.filter(a => a !== eventTarget).forEach(a => a.close());\n    }\n}\n"],"version":3}