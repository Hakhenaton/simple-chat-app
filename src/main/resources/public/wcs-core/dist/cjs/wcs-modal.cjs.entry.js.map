{"file":"wcs-modal.entry.cjs.js","mappings":";;;;;;AAAA,MAAM,QAAQ,GAAG,ypCAAypC;;MCQ7pC,KAAK;;;;2BAIoC,KAAK;gBAKhB,KAAK;2BAWM,KAAK;gBAM7B,GAAG;uBAKiB,KAAK;;EAEnD,MAAM;IACF,QACIA,QAACC,UAAI,QACDD,iBAAK,KAAK,EAAC,qBAAqB,eAAY,IAAI,CAAC,IAAI,IACjDA,iBAAK,KAAK,EAAC,kBAAkB,IACzBA,oBACIA,kBAAM,IAAI,EAAC,QAAQ,GAAQ,CAC1B,EACJ,IAAI,CAAC,eAAe,KACjBA,wBAAY,KAAK,EAAC,OAAO,EAAC,IAAI,EAAC,OAAO,EAAC,KAAK,EAAC,UAAU,EAC3C,OAAO,EAAE,CAAC,MAAM,KAAK,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAC5DA,0BAAc,IAAI,EAAC,OAAO,GAAgB,CACjC,CAAC,CAGhB,EACNA,iBAAK,KAAK,EAAC,mBAAmB,IAC1BA,qBAAa,CACX,EACL,CAAC,IAAI,CAAC,WAAW,KACdA,iBAAK,KAAK,EAAC,mBAAmB,IAC1BA,kBAAM,IAAI,EAAC,SAAS,GAAQ,CAC1B,CAAC,CAET,CACH,EACT;GACL;EAIO,SAAS,CAAC,KAAoB;IAClC,IAAI,IAAI,CAAC,eAAe,IAAI,KAAK,CAAC,GAAG,KAAK,QAAQ,EAAE;MAChD,IAAI,CAAC,KAAK,EAAE,CAAC;KAChB;GACJ;EAEO,kBAAkB,CAAC,CAAa;IACpC,IAAI,CAAC,KAAK,EAAE,CAAC;GAChB;EAEO,KAAK;IACT,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IAClB,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;GAC/B;;;;;;","names":["h","Host"],"sources":["./src/components/modal/modal.scss?tag=wcs-modal","./src/components/modal/modal.tsx"],"sourcesContent":["wcs-modal {\n    z-index: 999;\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    display: none;\n    background: rgba(0, 0, 0, 0.4);\n}\n\nwcs-modal[show] {\n    display: flex;\n    height: 100vh;\n    width: 100vw;\n    align-items: center;\n    justify-content: center;\n}\n\n/**\nBackdrop\n */\nwcs-modal[without-backdrop] {\n    background-color: unset;\n\n    .wcs-modal-container {\n        border: solid 1px var(--wcs-text-light);\n    }\n}\n\n/**\nModal window\n */\n.wcs-modal-container {\n    max-height: var(--wcs-modal-max-height, 80%);\n    background-color: #fff;\n    display: grid;\n    grid-template-columns: 100%;\n    grid-template-rows: auto 1fr auto;\n    box-sizing: border-box;\n    pointer-events: auto;\n    background-clip: padding-box;\n    border: 0 solid rgba(0, 0, 0, 0.2);\n    border-radius: 0.4375rem;\n    z-index: 20000;\n    padding: 1.375rem 1.875rem 1.875rem 1.875rem;\n}\n\n.wcs-modal-container[data-size=s] {\n    width: 288px;\n}\n\n.wcs-modal-container[data-size=m] {\n    width: 480px;\n}\n\n.wcs-modal-container[data-size=l] {\n    width: 864px;\n}\n\n.wcs-modal-container[data-size=xl] {\n    width: 1200px;\n}\n\n.wcs-modal-header {\n    h5 {\n        font-size: 24px;\n        font-weight: 400;\n        margin: 0;\n    }\n\n    margin-bottom: 8px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.wcs-modal-content {\n    font-weight: 400;\n    font-size: 16px;\n    overflow-y: auto;\n}\n\n.wcs-modal-actions {\n    margin-top: 20px;\n    display: flex;\n    justify-content: flex-end;\n}\n","import { Component, Event, EventEmitter, h, Host, Listen, Prop } from '@stencil/core';\nimport { ModalSize } from './modal-interface';\n\n@Component({\n    tag: 'wcs-modal',\n    styleUrl: 'modal.scss',\n    shadow: false,\n})\nexport class Modal {\n    /**\n     * Specifies whether the component should display a backdrop on the entire page\n     */\n    @Prop({reflect: true}) withoutBackdrop: boolean = false;\n\n    /**\n     * Displays the modal\n     */\n    @Prop({reflect: true}) show: boolean = false;\n\n    /**\n     * Triggered when the user leaves the dialog with the closing button.\n     */\n    @Event() wcsDialogClosed: EventEmitter<void>;\n\n    /**\n     * Specifies whether the component should display a close button.\n     * if false, it won't close the modal when the escape key is pressed.\n     */\n    @Prop({reflect: true}) showCloseButton: boolean = false;\n\n    /**\n     * There are multiple sizes for modals. The default size is medium (m), however other sizes are available. Select the\n     * size best suited for the content and screen size displaying the modal. Remember to test responsiveness.\n     */\n    @Prop() size: ModalSize = 'm';\n\n    /**\n     * Specifies whether the component should hide the actions slot or not\n     */\n    @Prop({reflect: true}) hideActions: boolean = false;\n\n    render() {\n        return (\n            <Host>\n                <div class=\"wcs-modal-container\" data-size={this.size}>\n                    <div class=\"wcs-modal-header\">\n                        <h5>\n                            <slot name=\"header\"></slot>\n                        </h5>\n                        {this.showCloseButton && (\n                            <wcs-button shape=\"round\" mode=\"clear\" class=\"wcs-dark\"\n                                        onClick={($event) => this.onCloseButtonClick($event)}>\n                                <wcs-mat-icon icon=\"close\"></wcs-mat-icon>\n                            </wcs-button>)\n                        }\n\n                    </div>\n                    <div class=\"wcs-modal-content\">\n                        <slot></slot>\n                    </div>\n                    {!this.hideActions && (\n                        <div class=\"wcs-modal-actions\">\n                            <slot name=\"actions\"></slot>\n                        </div>)\n                    }\n                </div>\n            </Host>\n        );\n    }\n\n    @Listen('keydown', {target: 'document'})\n    // @ts-ignore\n    private onKeyDown(event: KeyboardEvent) {\n        if (this.showCloseButton && event.key === 'Escape') {\n            this.close();\n        }\n    }\n\n    private onCloseButtonClick(_: MouseEvent) {\n        this.close();\n    }\n\n    private close() {\n        this.show = false;\n        this.wcsDialogClosed.emit();\n    }\n}\n"],"version":3}