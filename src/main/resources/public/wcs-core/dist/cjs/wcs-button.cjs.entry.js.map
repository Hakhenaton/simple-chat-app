{"file":"wcs-button.entry.cjs.js","mappings":";;;;;;;;AAQO,MAAM,mBAAmB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAU,CAAC;SAI5C,eAAe,CAAC,IAAY;;EAExC,OAAO,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC9C;;ACfA,MAAM,SAAS,GAAG,m/TAAm/T;;MCgCx/T,MAAM;;;gBAMgC,QAAQ;;;oBAiBnB,KAAK;kBAKxB,IAAI;gBAM0B,GAAG;iBAKD,QAAQ;gBAKV,OAAO;mBAKZ,KAAK;;;;;;EAO/C,OAAO,CAAC,EAAS;IACb,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,EAAE;MAC/B,EAAE,CAAC,wBAAwB,EAAE,CAAC;KACjC;IACD,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAIA,oBAAY,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;;;;MAIjD,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;MACrC,IAAI,IAAI,EAAE;QACN,EAAE,CAAC,cAAc,EAAE,CAAC;QAEpB,MAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC3D,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAC5B,UAAU,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QAClC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC7B,UAAU,CAAC,KAAK,EAAE,CAAC;QACnB,UAAU,CAAC,MAAM,EAAE,CAAC;OACvB;KACJ;GACJ;EAED,iBAAiB;IACb,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;MAC7B,OAAO,CAAC,KAAK,CAAC,wCAAwC,IAAI,CAAC,IAAI,sBAAsB,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;MACxH,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;KACnB;GACJ;EAED,gBAAgB;IACZ,IAAI,CAAC,SAAS,GAAG,IAAIC,mBAAS,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,CAAC;GACzF;EAEO,mBAAmB;IACvB,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,KAAK,CAAC;GACnC;EAEO,oBAAoB;IACxB,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC;GAClC;EAEO,UAAU;IACd,OAAO,IAAI,CAAC,IAAI,KAAK,SAAS,GAAG,GAAG,GAAG,QAAQ,CAAC;GACnD;EAGD,cAAc;IACV,IAAI,IAAI,CAAC,MAAM,EAAE;MACb,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC9B;SAAM;MACH,IAAI,CAAC,oBAAoB,EAAE,CAAC;KAC/B;GACJ;EAED,MAAM;IACF,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAClC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,KAAK,SAAS;QAC/B,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE;QACxD,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;IAC1B,QACIC,QAAC,OAAO,oBACA,KAAK,IACT,KAAK,EAAC,kBAAkB,EACxB,QAAQ,EAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,KAGrC,IAAI,CAAC,OAAO,IAAIA,4BAA2B,EAE/CA,qBAAO,CACD,EACZ;GACL;;;;;;;;;;;","names":["hasShadowDom","MDCRipple","h"],"sources":["./src/components/button/button-interface.ts","./src/components/button/button.scss?tag=wcs-button&encapsulation=shadow","./src/components/button/button.tsx"],"sourcesContent":["import { WcsSize } from '../../shared-types';\n\nexport type WcsButtonType = 'button' | 'submit';\n\nexport type WcsButtonShape = 'normal' | 'round' | 'square';\n\nexport type WcsButtonMode = 'plain' | 'stroked' | 'clear';\n\nexport const WcsButtonSizeValues = ['s', 'm', 'l'] as const; // as const keyword is used to infer and preserve the exact literal values of an array or object.\n\nexport type WcsButtonSize = Extract<WcsSize, typeof WcsButtonSizeValues[number]>;\n\nexport function isWcsButtonSize(size: string): size is WcsButtonSize {\n    // @ts-ignore : ignore size type, as it is checked with WcsButtonSizeValues\n    return WcsButtonSizeValues.includes(size);\n}\n","@import '../../style/elevation.scss';\n// TODO: get rid of this.\n@import '~@material/ripple/mdc-ripple';\n@import '../../style/focus-outline.scss';\n\n:host {\n    display: inline-block;\n    --wcs-button-color: var(--wcs-contrast, var(--wcs-white, white));\n    --wcs-button-background-color: var(--wcs-base, var(--wcs-primary, #0088CE));\n    --wcs-button-ripple-color: var(--wcs-contrast, var(--wcs-white, white));\n    --wcs-button-border-radius: var(--wcs-border-radius);\n    --wcs-button-border-color: var(--wcs-base);\n}\n\n.wcs-inner-button:focus-visible {\n    @include focus-outline($border-radius: var(--wcs-button-border-radius));\n}\n\n:host([mode=clear]) {\n    --wcs-button-border-color: transparent;\n\n    .wcs-inner-button {\n        box-shadow: none;\n    }\n}\n\n:host([mode=clear]),\n:host([mode=stroked]) {\n    --wcs-button-color: var(--wcs-base);\n    --wcs-button-background-color: transparent;\n\n    .wcs-inner-button {\n        &::before,\n        &::after {\n            --wcs-button-ripple-color: var(--wcs-base);\n        }\n    }\n}\n\n:host([size=l]) {\n    --wcs-button-padding: var(--wcs-padding-m) var(--wcs-padding);\n    --wcs-button-min-height: var(--wcs-size-l);\n    --wcs-button-min-width: var(--wcs-size-l);\n    --wcs-button-font-size: 1.0625rem;\n}\n\n:host([size=m]) { // Default\n    --wcs-button-padding: var(--wcs-padding-m) var(--wcs-padding);\n    --wcs-button-min-height: var(--wcs-size-m);\n    --wcs-button-min-width: var(--wcs-size-m);\n    --wcs-button-font-size: 1rem;\n}\n\n:host([size=s]) {\n    --wcs-button-padding: var(--wcs-padding-s) var(--wcs-padding);\n    --wcs-button-min-height: var(--wcs-size-s);\n    --wcs-button-min-width: var(--wcs-size-s);\n    --wcs-button-font-size: 0.9375rem;\n}\n\n:host([shape=round]) {\n    --wcs-button-border-radius: 2rem;\n\n    ::slotted(wcs-mat-icon) {\n        margin: calc(-1 * var(--wcs-padding));\n    }\n}\n\n:host([shape=square]) {\n    --wcs-button-padding: 0;\n\n    ::slotted(wcs-mat-icon) {\n        margin: calc(-1 * var(--wcs-padding));\n    }\n}\n\n:host([shape=normal]) {\n    .wcs-inner-button {\n        min-width: var(--wcs-button-min-width, unset);\n        min-height: var(--wcs-button-min-height, unset);\n    }\n}\n\n:host([mode=stroked]) {\n    .wcs-inner-button {\n        box-shadow: inset 0 0 0 1px var(--wcs-button-border-color);\n    }\n}\n\n:host([loading]) {\n    position: relative;\n\n    .wcs-inner-button > *:not(wcs-spinner) {\n        visibility: hidden;\n        opacity: 0;\n    }\n\n    wcs-spinner {\n        height: calc(var(--wcs-button-min-height) / 2);\n        width: calc(var(--wcs-button-min-width) / 2);\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        margin: auto;\n    }\n}\n\n:host([disabled]), :host([loading]) {\n    :host(not[loading]) {\n        --wcs-button-background-color: var(--wcs-light);\n    }\n    --wcs-button-color: var(--wcs-text-disabled);\n    cursor: not-allowed;\n\n    .wcs-inner-button {\n        // Fix for stroked button\n        --wcs-button-border-color: var(--wcs-light);\n        opacity: 1;\n        cursor: default;\n        pointer-events: none;\n    }\n\n    &:host([mode=clear]),\n    &:host([disabled]) {\n        --wcs-button-background-color: transparent;\n    }\n}\n\n.wcs-inner-button {\n    @include mdc-ripple-surface;\n    @include mdc-ripple-radius-bounded;\n    @include mdc-states-hover-opacity(.1);\n    @include mdc-states-focus-opacity(.2);\n    @include mdc-states-press-opacity(.3);\n    @include mdc-states-base-color(white);\n\n    // This property is used to set the ripple color\n    &::before,\n    &::after {\n        background-color: var(--wcs-button-ripple-color);\n    }\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    font-family: var(--wcs-font-sans-serif);\n    background-color: var(--wcs-button-background-color);\n    color: var(--wcs-button-color);\n    padding: var(--wcs-button-padding);\n    border-radius: var(--wcs-button-border-radius);\n    border: none;\n    overflow: hidden;\n    outline: 0;\n    text-transform: none;\n    margin: 0;\n    cursor: pointer;\n    font-weight: 500;\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: middle;\n    user-select: none;\n    font-size: var(--wcs-button-font-size);\n    line-height: 1.5;\n    min-height: var(--wcs-button-min-height);\n    min-width: var(--wcs-button-min-width);\n\n    transition: color 175ms ease-in-out, background-color 175ms ease-in-out, wcs-elevation-transition();\n\n    &:focus {\n        @include wcs-elevation(1);\n    }\n\n    &:hover {\n        @include wcs-elevation(2);\n    }\n}\n\na {\n    text-decoration: none;\n    box-sizing: border-box;\n}\n\n// Remove mozilla dotted outline on button and a\nbutton::-moz-focus-inner,\na::-moz-focus-inner {\n    border: 0;\n}\n","import {Component, ComponentInterface, Element, h, Listen, Prop, Watch} from '@stencil/core';\n\nimport { MDCRipple } from '@material/ripple';\n\nimport {\n    isWcsButtonSize,\n    WcsButtonMode,\n    WcsButtonShape,\n    WcsButtonSize,\n    WcsButtonSizeValues,\n    WcsButtonType\n} from './button-interface';\nimport { hasShadowDom } from '../../utils/helpers';\n\n/**\n * Button component, can also be a link when specifying href.\n *\n * ## Click event\n *\n * The WCS button relies on the native click event to pass a user click to your app.\n * For now, it's not possible for us to prevent the click event to be fired when the button's disabled attribute is true.\n * This means you'll receive click events on a disabled wcs button.\n * If you're using the button with a library like Angular or React, they have internal mechanisms to prevent this behavior. Your callbacks will therefore not be called.\n * To fix this problem, we plan to provide a wcsClick event in addition to the native click for applications developed without frameworks.\n */\n@Component({\n    tag: 'wcs-button',\n    styleUrl: 'button.scss',\n    shadow: {\n        delegatesFocus: true\n    }\n})\nexport class Button implements ComponentInterface {\n    @Element() private el!: HTMLElement;\n\n    /**\n     * Specify the button type.\n     */\n    @Prop({ mutable: true }) type: WcsButtonType = 'button';\n\n    /**\n     * Set a URL to point to.<br/>\n     * If specified use a `a` tag instead of `btn`.\n     */\n    @Prop() href?: string;\n\n    /**\n     * Specifies where to open the linked document when using href (see prop above)<br/>\n     * Default '_self' will open the linked document in the same frame as it was clicked\n     */\n    @Prop() target?: '_blank' | '_self';\n\n    /**\n     * Specify whether the button is disabled or not.\n     */\n    @Prop({ reflect: true }) disabled = false;\n\n    /**\n     * Specify whether the button should have a ripple effect or not.\n     */\n    @Prop() ripple = true;\n    private mdcRipple: MDCRipple;\n\n    /**\n     * Specify the size of the button.\n     */\n    @Prop({ reflect: true }) size: WcsButtonSize = 'm';\n\n    /**\n     * Specify the shape of the button.\n     */\n    @Prop({ reflect: true }) shape: WcsButtonShape = 'normal';\n\n    /**\n     * This attribute specify the appearance of the button.\n     */\n    @Prop({ reflect: true }) mode: WcsButtonMode = 'plain';\n\n    /**\n     * Flag to display spinner until the end of action\n     */\n    @Prop({mutable: true}) loading: boolean = false;\n\n    /**\n     * Native event click is emit event if we decide to stop propagation of it\n     * @param ev\n     */\n    @Listen('click')  // TODO: define custom event click to be able to stop it's propagation when the custom button is disabled or is in loading state\n    onClick(ev: Event) {\n        if (this.disabled || this.loading) {\n            ev.stopImmediatePropagation();\n        }\n        if (this.type !== 'button' && hasShadowDom(this.el)) {\n            // this button wants to specifically submit a form\n            // climb up the dom to see if we're in a <form>\n            // and if so, then use JS to submit it\n            const form = this.el.closest('form');\n            if (form) {\n                ev.preventDefault();\n\n                const fakeButton = window.document.createElement('button');\n                fakeButton.type = this.type;\n                fakeButton.style.display = 'none';\n                form.appendChild(fakeButton);\n                fakeButton.click();\n                fakeButton.remove();\n            }\n        }\n    }\n\n    componentWillLoad(): Promise<void> | void {\n        if (!isWcsButtonSize(this.size)) {\n            console.error(`Invalid size value for wcs-button : \"${this.size}\". Must be one of \"${WcsButtonSizeValues.join(', ')}\"`);\n            this.size = \"m\"; // Default fallback value\n        }\n    }\n\n    componentDidLoad() {\n        this.mdcRipple = new MDCRipple(this.el.shadowRoot.querySelector('.wcs-inner-button'));\n    }\n\n    private enabledRippleEffect() {\n        this.mdcRipple.disabled = false;\n    }\n\n    private disabledRippleEffect() {\n        this.mdcRipple.disabled = true;\n    }\n\n    private getTagName() {\n        return this.href !== undefined ? 'a' : 'button';\n    }\n\n    @Watch('ripple')\n    onRippleChange(): void {\n        if (this.ripple) {\n            this.enabledRippleEffect();\n        } else {\n            this.disabledRippleEffect();\n        }\n    }\n\n    render() {\n        const TagType = this.getTagName();\n        const attrs = this.href !== undefined\n            ? { href: this.href, role: 'button', target: this.target }\n            : { type: this.type };\n        return (\n            <TagType\n                {...attrs}\n                class=\"wcs-inner-button\"\n                disabled = {this.disabled || this.loading}\n            >\n                {\n                    this.loading && <wcs-spinner></wcs-spinner>\n                }\n                <slot/>\n            </TagType>\n        );\n    }\n}\n"],"version":3}