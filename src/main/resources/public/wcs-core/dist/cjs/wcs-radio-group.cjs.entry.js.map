{"file":"wcs-radio-group.entry.cjs.js","mappings":";;;;;;AAAA,MAAM,aAAa,GAAG,miBAAmiB;;MCoB5iB,UAAU;;;;;;gBAG2C,OAAO;;EAOrE,oBAAoB,CAAC,QAAa;IAC9B,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;GAC3C;EAED,gBAAgB;IACZ,IAAI,IAAI,CAAC,KAAK,EAAE;MACZ,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;KAC7C;IACD,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,IAAI,KAAK,YAAY,EAAE;MACtD,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;QAC/B,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;OAC3B;KACJ;GACJ;EAED,IAAY,OAAO;IACf,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IAC3C,OAAO,IAAI,CAAC,MAAM,KAAK,CAAC;QAClB,IAAwC;QACxC,IAAI,KAAK,IAAI;UACT,IAAI,CAAC,gBAAgB,EAA2B;UAChD,EAAE,CAAC;GAChB;EAGD,qBAAqB,CAAC,KAAoC;IACtD,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACnD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;MAChB,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK;KAC5B,CAAC,CAAA;GACL;EAEO,kBAAkB,CAAC,KAAa,EAAE,aAAsB;IAC5D,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;MAC/B,IAAI,MAAM,CAAC,KAAK,KAAK,KAAK,EAAE;QACxB,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;OACrC;WAAM;QACH,IAAI,aAAa,EAAE;UACf,MAAM,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;SACtC;OACJ;KACJ;GACJ;EAED,MAAM;IACF,QACIA,QAACC,UAAI,QACDD,kBAAM,IAAI,EAAC,QAAQ,GAAE,CAClB,EACT;GACL;;;;;;;;;;","names":["h","Host"],"sources":["./src/components/radio-group/radio-group.scss?tag=wcs-radio-group&encapsulation=shadow","./src/components/radio-group/radio-group.tsx"],"sourcesContent":[":host {\n    display: flex;\n}\n\n:host([mode=radio]) {\n    flex-direction: column;\n\n    ::slotted([slot=option]:first-child) {\n        margin-top: 0;\n    }\n\n    ::slotted([slot=option]:last-child) {\n        margin-bottom: 0;\n    }\n\n    ::slotted([slot=options]) {\n        margin-top: calc(var(--wcs-base-margin) / 2);\n        margin-bottom: calc(var(--wcs-base-margin) / 2);\n    }\n}\n\n:host([mode=option]) {\n    display: inline-flex;\n    flex-direction: row;\n    padding: calc(var(--wcs-base-margin) / 4);\n    background-color: #4d4f53;\n    border-radius: 0.6875rem;\n}\n\n:host([mode=horizontal]) {\n    justify-content: space-between;\n}\n","import {\n    Component,\n    ComponentInterface,\n    Element,\n    Event,\n    EventEmitter,\n    h,\n    Host,\n    Listen,\n    Prop,\n    Watch\n} from '@stencil/core';\nimport { RadioGroupChangeEventDetail, RadioGroupMode } from './radio-group-interface';\nimport { RadioChosedEvent } from '../radio/radio-interface';\n\n@Component({\n    tag: 'wcs-radio-group',\n    styleUrl: 'radio-group.scss',\n    shadow: true\n})\nexport class RadioGroup implements ComponentInterface {\n    @Prop() value: any | any[] | undefined | null;\n    @Prop({reflect: true, mutable: false}) name;\n    @Prop({reflect: true, mutable: false}) mode: RadioGroupMode = 'radio';\n    @Element() private el!: HTMLWcsRadioGroupElement;\n\n    /** Emitted when the value has changed. */\n    @Event() wcsChange!: EventEmitter<RadioGroupChangeEventDetail>;\n\n    @Watch('value')\n    onValueChangeHandler(newValue: any) {\n        this.updateOptionsState(newValue, true);\n    }\n\n    componentDidLoad() {\n        if (this.value) {\n            this.updateOptionsState(this.value, true);\n        }\n        if (this.mode === 'option' || this.mode === 'horizontal') {\n            for (const option of this.options) {\n                option.mode = this.mode;\n            }\n        }\n    }\n\n    private get options(): HTMLWcsRadioElement[] {\n        const opts = this.el.querySelectorAll('wcs-radio');\n        const slot = this.el.querySelector('slot');\n        return opts.length !== 0\n            ? opts as unknown as HTMLWcsRadioElement[]\n            : slot !== null\n                ? slot.assignedElements() as HTMLWcsRadioElement[]\n                : [];\n    }\n\n    @Listen('wcsRadioClick')\n    selectedOptionChanged(event: CustomEvent<RadioChosedEvent>) {\n        this.updateOptionsState(event.detail.value, false);\n        this.wcsChange.emit({\n            value: event.detail.value\n        })\n    }\n\n    private updateOptionsState(value: string, markAsChecked: boolean) {\n        for (const option of this.options) {\n            if (option.value !== value) {\n                option.removeAttribute('checked');\n            } else {\n                if (markAsChecked) {\n                    option.setAttribute('checked', '');\n                }\n            }\n        }\n    }\n\n    render() {\n        return (\n            <Host>\n                <slot name=\"option\"/>\n            </Host>\n        );\n    }\n\n}\n"],"version":3}