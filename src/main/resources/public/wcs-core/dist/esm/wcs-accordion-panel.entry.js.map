{"file":"wcs-accordion-panel.entry.js","mappings":";;;AAAA,MAAM,iBAAiB,GAAG,0pCAA0pC;;MCQvqC,cAAc;;;;gBACsB,KAAK;0BAMD,KAAK;qBAOV,KAAK;kCAOQ,KAAK;;EAK9D,UAAU,CAAC,QAAiB;IACxB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;GACrC;EAGD,MAAM,KAAK;IACP,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;GACrB;EAED,MAAM;IAIF,QACI,EAAC,IAAI,QACD,+BAAuB,IAAI,CAAC,IAAI,GAAG,MAAM,GAAE,OAAO,mBAAgB,SAAS,EAAC,KAAK,EAAC,QAAQ,EAAC,OAAO,EAAE,MAAM,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,IAC5H,YAAM,IAAI,EAAC,QAAQ,GAAE,EACrB,YAAM,KAAK,EAAC,eAAe,IACtB,CAAC,IAAI,CAAC,cAAc,KACjB,gBAAO,IAAI,CAAC,IAAI,GAAG,QAAQ,GAAG,QAAQ,CAAQ,CAAC,EAEnD,EAAC,WAAW,IAAC,EAAE,EAAE,IAAI,CAAC,IAAI,GAAG,CAC1B,CACF,EACT,WAAK,KAAK,EAAC,SAAS,EAAC,EAAE,EAAC,SAAS,IAC7B,YAAM,IAAI,EAAC,SAAS,GAAE,CACpB,CACH,EACT;GACL;;;;;;;;;","names":[],"sources":["./src/components/accordion-panel/accordion-panel.scss?tag=wcs-accordion-panel&encapsulation=shadow","./src/components/accordion-panel/accordion-panel.tsx"],"sourcesContent":[":host {\n    display: flex;\n    flex-direction: column;\n    cursor: pointer;\n    margin-bottom: 16px;\n\n    .header {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 14px 24px;\n        border-radius: 7px;\n        font-weight: 500;\n        // TODO replace px to rem\n        font-size: 16px;\n        color: var(--wcs-primary);\n        background-color: var(--wcs-light);\n        border: none;\n        @media (forced-colors: active) {\n            // for WHCM\n            border: 1px solid ButtonBorder;\n        }\n        &:focus-visible {\n            outline: 2px solid var(--wcs-primary);\n        }\n    }\n\n    .header-action {\n        display: flex;\n        align-items: center;\n        user-select: none;\n\n        .arrow {\n            fill: var(--wcs-primary);\n        }\n    }\n\n    .content {\n        display: none;\n    }\n\n}\n\n:host([open]) {\n    margin-bottom: 0;\n\n    .content {\n        display: block;\n    }\n\n    &:host([group-content-with-header]) {\n        .header {\n            border-radius: 7px 7px 0 0;\n            padding-bottom: 0;\n        }\n\n        .content {\n            border-radius: 0 0 7px 7px;\n            margin-bottom: 14px;\n            background-color: var(--wcs-light);\n        }\n    }\n\n    &:host([highlight]) {\n        .header {\n            background-color: var(--wcs-primary);\n            color: var(--wcs-light);\n        }\n\n        .arrow {\n            fill: var(--wcs-light);\n        }\n\n        &:host([group-content-with-header]) {\n            .content {\n                background-color: var(--wcs-primary);\n                color: var(--wcs-light);\n            }\n        }\n    }\n}\n","import { Component, Event, EventEmitter, h, Host, Method, Prop, Watch } from '@stencil/core';\nimport { SelectArrow } from '../select/select-arrow';\n\n@Component({\n    tag: 'wcs-accordion-panel',\n    styleUrl: 'accordion-panel.scss',\n    shadow: true\n})\nexport class AccordionPanel {\n    @Prop({reflect: true, mutable: true}) open = false;\n\n    /**\n     * Specifies whether the component should display the open/close text.\n     * if false, it won't show the open/close text.\n     */\n    @Prop({reflect: true}) hideActionText: boolean = false;\n\n    /**\n     * Specifies whether the component should highlight when open with primary color.\n     * if true, the background color will be the primary color.\n     * if false, the background color will be wcs-light.\n     */\n    @Prop({reflect: true}) highlight: boolean = false;\n\n    /**\n     * Specifies wether the component should group the content with header in one card\n     * if true, there will be only one card with the header and the content\n     * Nothing change when the panel is close\n     */\n    @Prop({reflect: true}) groupContentWithHeader: boolean = false;\n\n    @Event() wcsOpenChange!: EventEmitter<boolean>;\n\n    @Watch('open')\n    openChange(newValue: boolean) {\n        this.wcsOpenChange.emit(newValue);\n    }\n\n    @Method()\n    async close() {\n        this.open = false;\n    }\n\n    render() {\n  \n  \n  \n        return (\n            <Host>\n                <button aria-expanded={this.open ? \"true\": \"false\"} aria-controls=\"content\" class=\"header\" onClick={() => this.open = !this.open}>\n                    <slot name=\"header\"/>\n                    <span class=\"header-action\">\n                        {!this.hideActionText && (\n                            <span>{this.open ? 'Fermez' : 'Ouvrez'}</span>)\n                        }\n                        <SelectArrow up={this.open}/>\n                    </span>\n                </button>\n                <div class=\"content\" id=\"content\">\n                    <slot name=\"content\"/>\n                </div>\n            </Host>\n        );\n    }\n}\n"],"version":3}